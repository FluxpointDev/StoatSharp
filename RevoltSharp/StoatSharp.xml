<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StoatSharp</name>
    </assembly>
    <members>
        <member name="T:StoatSharp.ClientConfig">
            <summary>
            Config options for the StoatSharp lib.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.ClientName">
            <summary>
            Set your own custom client name to show in the user agent.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.RestProxy">
            <summary>
            Set a proxy for http rest calls.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.WebSocketProxy">
            <summary>
            Set a proxy for the websocket itself.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.ApiUrl">
            <summary>
            Do not change this unless you know what you're doing.
            </summary>
            <remarks>
            Defaults to https://stoat.chat/api/
            </remarks>
        </member>
        <member name="F:StoatSharp.ClientConfig.Debug">
            <summary>
            Do not use this unless you know what you're doing.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.Owners">
            <summary>
            Useful for owner checks and also used for RequireOwnerAttribute when using the built-in command handler.
            </summary>
        </member>
        <member name="F:StoatSharp.ClientConfig.CfClearance">
            <summary>
            The cf_clearance cookie for Cloudflare.
            </summary>
            <remarks>
            This is only neccesary if Stoat is currently in Under Attack Mode (eg during a DDoS attack).
            Please ensure that the user agent and IP used to generate the clearance cookie will be identical to the ones used by your StoatSharp client, or else CloudFlare will not accept the clearance.
            </remarks>
        </member>
        <member name="F:StoatSharp.ClientConfig.LogMode">
            <summary>
            Set the default logging mode on what to show in the console.
            </summary>
        </member>
        <member name="T:StoatSharp.ClientDebugConfig">
            <summary>
            Debug settings for the StoatSharp lib.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.EnableConsoleQuickEdit">
            <summary>
            This is only used when running Windows OS, if true then StoatClient will not disable console quick edit mode for command prompt.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.UploadUrl">
            <summary>
            This will be changed once you run Client.StartAsync()
            </summary>
            <remarks>
            Defaults to https://cdn.stoatusercontent.com/
            </remarks>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.WebsocketUrl">
            <summary>
            This will be changed once you run Client.StartAsync()
            </summary>
            <remarks>
            Defaults to wss://events.stoat.chat
            </remarks>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogWebSocketFull">
            <summary>
            Log all websocket events that you get from Stoat.
            </summary>
            <remarks>
            Do not use this in production!
            </remarks>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogWebSocketReady">
            <summary>
            Log the websocket ready event json data.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogWebSocketError">
            <summary>
            Log when the websocket gets an error.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogWebSocketUnknownEvent">
            <summary>
            Log when the websocket gets an unknown event not used in the lib.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogRestRequest">
            <summary>
            Log the internal request used on <see cref="!:StoatRestClient.SendRequestAsync(RequestType, string, IStoatRequest)"/> and <see cref="!:StoatRestClient.UploadFileAsync(byte[], string, UploadFileType)"/>
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogRestRequestJson">
            <summary>
            Log the json content used when sending a http request.
            </summary>
        </member>
        <member name="P:StoatSharp.ClientDebugConfig.LogRestResponseJson">
            <summary>
            Log the http response content/json when successful.
            </summary>
        </member>
        <member name="T:StoatSharp.ClientEvents">
            <summary>
            Do not use this class! only used for <see cref="T:StoatSharp.StoatClient"/>
            </summary>
        </member>
        <member name="T:StoatSharp.ClientEvents.StoatEvent">
            <summary>
            Event used for StoatSharp lib.
            </summary>
        </member>
        <member name="T:StoatSharp.ClientEvents.SelfUserEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.SocketErrorEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.MessageEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.MessagesBulkDeletedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.UserEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.RoleEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.RoleUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.UserUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.SelfUserUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerEmojiEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerUserEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerSelfEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerMemberEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerMemberLeftEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.MessageUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ChannelMessageIdEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ChannelEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ChannelUserEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.GroupChannelSelfEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.GroupChannelUserEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ChannelUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ServerUpdatedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ReactionEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.ReactionBulkRemovedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.UserPlatformRemovedEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.WebhookEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.UserRelationshipUpdated">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="T:StoatSharp.ClientEvents.LogEvent">
            <inheritdoc cref="T:StoatSharp.ClientEvents.StoatEvent" />
        </member>
        <member name="E:StoatSharp.ClientEvents.OnReady">
            <summary>
            Event used when the <see cref="T:StoatSharp.StoatClient"/> WebSocket has fully loaded with cached data and <see cref="P:StoatSharp.StoatClient.CurrentUser"/> is set.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnWebSocketError">
            <summary>
            Event used when the <see cref="T:StoatSharp.StoatClient"/> WebSocket has encountered an error.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnStarted">
            <summary>
            Event used when the <see cref="T:StoatSharp.StoatClient"/> has loaded with the <see cref="P:StoatSharp.StoatClient.CurrentUser"/>.
            </summary>
            <remarks>
            You can use this with <see cref="F:StoatSharp.ClientMode.Http" /> and <see cref="F:StoatSharp.ClientMode.WebSocket" />
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnLogin">
            <summary>
            Event used when the <see cref="T:StoatSharp.StoatClient"/> has logged in with the <see cref="P:StoatSharp.StoatClient.CurrentUser"/>.
            </summary>
            <remarks>
            You can use this with <see cref="F:StoatSharp.ClientMode.Http" /> and <see cref="F:StoatSharp.ClientMode.WebSocket" />
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnConnected">
            <summary>
            Event used when the <see cref="T:StoatSharp.StoatClient"/> WebSocket has connected successfully.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMessageRecieved">
            <summary>
            Receive message events from websocket in a <see cref="T:StoatSharp.TextChannel"/>, <seealso cref="T:StoatSharp.GroupChannel"/>, <seealso cref="T:StoatSharp.DMChannel"/> or <seealso cref="T:StoatSharp.SavedMessagesChannel"/>
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMessageUpdated">
            <summary>
            Receive message updated event with properties of the updated message. (not last message sadly)
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMessageDeleted">
            <summary>
            Receive message deleted event with the <see cref="T:StoatSharp.Channel" /> and message id.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMessagesBulkDeleted">
            <summary>
            Receieve a list of deleted message ids with the <see cref="T:StoatSharp.Channel" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnDMChannelOpened">
            <summary>
            A <see cref="T:StoatSharp.DMChannel" /> has been opened or become active again for the <see cref="T:StoatSharp.User" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnChannelCreated">
            <summary>
            A <see cref="T:StoatSharp.ServerChannel" /> has been created in a <see cref="T:StoatSharp.Server" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnChannelUpdated">
            <summary>
            A channel has been updated with <see cref="T:StoatSharp.ChannelUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnChannelDeleted">
            <summary>
            A <see cref="T:StoatSharp.Channel" /> has been been deleted, this does not include <see cref="T:StoatSharp.DMChannel" /> or <see cref="T:StoatSharp.SavedMessagesChannel" />
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnGroupJoined">
            <summary>
            The current user/bot account has joined a <see cref="T:StoatSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnGroupLeft">
            <summary>
            The current user/bot account has left a <see cref="T:StoatSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnGroupUserJoined">
            <summary>
            A <see cref="T:StoatSharp.User" /> has joined the <see cref="T:StoatSharp.GroupChannel" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnGroupUserLeft">
            <summary>
            A <see cref="T:StoatSharp.User" /> has left or been removed from the <see cref="T:StoatSharp.GroupChannel" />
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnServerUpdated">
            <summary>
            A <see cref="T:StoatSharp.Server" /> has been updated with <see cref="T:StoatSharp.ServerUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnServerJoined">
            <summary>
            The current user/bot account has joined a <see cref="T:StoatSharp.Server" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnServerLeft">
            <summary>
            The current user/bot account has left a <see cref="T:StoatSharp.Server" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMemberJoined">
            <summary>
            A new <see cref="T:StoatSharp.ServerMember" /> has joined the <see cref="T:StoatSharp.Server" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnMemberLeft">
            <summary>
            A <see cref="T:StoatSharp.ServerMember" /> has left the <see cref="T:StoatSharp.Server" />
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnRoleCreated">
            <summary>
            A new server <see cref="T:StoatSharp.Role" /> has been created.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnRoleDeleted">
            <summary>
            A server <see cref="T:StoatSharp.Role" /> has been deleted.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnRoleUpdated">
            <summary>
            A server <see cref="T:StoatSharp.Role" /> has been updated with <see cref="T:StoatSharp.RoleUpdatedProperties" />.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnEmojiCreated">
            <summary>
            A server <see cref="T:StoatSharp.Emoji" /> has been created.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnEmojiDeleted">
            <summary>
            A server <see cref="T:StoatSharp.Emoji" /> has been deleted.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnUserUpdated">
            <summary>
            A <see cref="T:StoatSharp.User" /> has been updated.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnCurrentUserUpdated">
            <summary>
            The current user/bot account has been updated.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnUserPlatformRemoved">
            <summary>
            A <see cref="T:StoatSharp.User" /> has been banned from the Stoat instance.
            </summary>
            <remarks>
            <see cref="T:StoatSharp.User" /> may be null if not cached.
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnWebhookCreated">
            <summary>
            A <see cref="T:StoatSharp.Webhook" /> has been created in a channel.
            </summary>
            <remarks>
            <see cref="P:StoatSharp.Webhook.Token" /> will always be empty.
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnClientLogout">
            <summary>
            The current client has logged out.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnUserRelationshipUpdated">
            <summary>
            A relationship for the current client has changed such as Blocked.
            </summary>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnReactionAdded">
            <summary>
            A <see cref="T:StoatSharp.Emoji" /> reaction has been added to a <see cref="T:StoatSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:StoatSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnReactionRemoved">
            <summary>
            A <see cref="T:StoatSharp.Emoji" /> reaction has been removed from a <see cref="T:StoatSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:StoatSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="E:StoatSharp.ClientEvents.OnReactionBulkRemoved">
            <summary>
            All <see cref="T:StoatSharp.Emoji" /> reactions have been removed from a <see cref="T:StoatSharp.Message" />.
            </summary>
            <remarks>
            Contains message id or <see cref="T:StoatSharp.Message" /> that can be downloaded.
            </remarks>
        </member>
        <member name="T:StoatSharp.StoatClient">
            <summary>
            Stoat client used to connect to the Stoat Chat API and WebSocket with a user or bot token.
            </summary>
            <remarks>
            Docs: <see href="https://docs.fluxpoint.dev/stoatsharp"/>
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Version">
            <summary>
            Version of the current StoatSharp lib installed.
            </summary>
        </member>
        <member name="M:StoatSharp.StoatClient.#ctor(StoatSharp.ClientMode,StoatSharp.ClientConfig)">
            <summary>
            Create a Stoat client that can be used for user or bot accounts.
            </summary>
            <param name="token">Bot token to connect with.</param>
            <param name="mode">Use http for http requests only with no websocket.</param>
            <param name="config">Optional config stuff for the bot and lib.</param>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
        </member>
        <member name="M:StoatSharp.StoatClient.SetVoiceClient(StoatSharp.IVoiceClient)">
            <summary>
            Set the voice client to use for the lib.
            </summary>
            <param name="client"></param>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
        </member>
        <member name="P:StoatSharp.StoatClient.VoiceClient">
            <summary>
            The current voice client in use with StoatSharp.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.Mode">
            <summary>
            The current client mode that StoatSharp is using either Http or WebSocket
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.Token">
            <summary>
            Stoat bot token used for http requests and websocket.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.StoatVersion">
            <summary>
            The current version of the stoat instance connected to.
            </summary>
            <remarks>
            This will be empty of you do not use <see cref="M:StoatSharp.StoatClient.StartAsync" />.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Serializer">
            <summary>
            The json serializer that is used with StoatSharp.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.SerializerPretty">
            <summary>
            The json serializer that is used with StoatSharp with pretty print formatting.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.Deserializer">
            <summary>
            The json serializer that is used with StoatSharp.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.Config">
            <summary>
            Client config options for user-agent and debug options including self-host support.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.Rest">
            <summary>
            Internal rest/http client used to connect to the Stoat API.
            </summary>
            <remarks>
            You can also make custom requests with <see cref="M:StoatSharp.Rest.StoatRestClient.SendRequestAsync(StoatSharp.Rest.RequestType,System.String,StoatSharp.Rest.IStoatRequest)"/> and json class based on <see cref="T:StoatSharp.Rest.IStoatRequest"/>
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Admin">
            <summary>
            This is for self-hosted Stoat instances that have global admin access.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatClient.CurrentUser">
            <summary>
            The current logged in user/bot account.
            </summary>
            <remarks>
            This will be <see langword="null" /> of you do not use <see cref="M:StoatSharp.StoatClient.StartAsync" />.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.CurrentQuery">
            <summary>
            The current query info of the connected Stoat instance.
            </summary>
            <remarks>
            This will be <see langword="null" /> of you do not use <see cref="M:StoatSharp.StoatClient.StartAsync" />.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.SavedMessagesChannel">
            <summary>
            The current user/bot account's private notes message channel.
            </summary>
            <remarks>
            This will be <see langword="null" /> if you have not created the channel from <see cref="M:StoatSharp.BotHelper.GetSavedMessagesChannelAsync(StoatSharp.Rest.StoatRestClient)" /> once.
            </remarks>
        </member>
        <member name="M:StoatSharp.StoatClient.StartAsync">
            <summary>
            Start the Rest and Websocket to be used for the lib.
            </summary>
            <remarks>
            Will throw a <see cref="T:StoatSharp.StoatException"/> if the token is incorrect or failed to login for the current user/bot.
            </remarks>
            <exception cref="T:StoatSharp.StoatException"></exception>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
        </member>
        <member name="M:StoatSharp.StoatClient.StopAsync">
            <summary>
            Stop the WebSocket connection to Stoat.
            </summary>
            <remarks>
            Will throw a <see cref="T:StoatSharp.StoatException"/> if <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
            <exception cref="T:StoatSharp.StoatException"></exception>
        </member>
        <member name="P:StoatSharp.StoatClient.Servers">
            <summary>
            Get a list of <see cref="T:StoatSharp.Server" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Users">
            <summary>
            Get a list of <see cref="T:StoatSharp.User" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Channels">
            <summary>
            Get a list of <see cref="T:StoatSharp.Channel" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.StoatClient.Emojis">
            <summary>
            Get a list of <see cref="T:StoatSharp.Emoji" />s from the websocket client.
            </summary>
            <remarks>
            Will be empty if <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="E:StoatSharp.StoatClient.OnLog">
            <summary>
            Called to display information, events, and errors originating from the <see cref="T:StoatSharp.StoatClient"/>.
            </summary>
            <remarks>
            By default, StoatSharp will log its events to the <see cref="T:System.Console"/>. Adding a subscriber to this event overrides this behavior.
            </remarks>
        </member>
        <member name="T:StoatSharp.ClientMode">
            <summary>
            Run the client with Http requests only or use websocket to get cached data such as servers, channels and users instead of just ids.
            </summary>
            <remarks>
            Using <see cref="F:StoatSharp.ClientMode.Http"/> means that some data will be <see langword="null"/> such as <see cref="P:StoatSharp.Message.Author"/> and will only contain ids <see cref="P:StoatSharp.Message.AuthorId"/>
            </remarks>
        </member>
        <member name="F:StoatSharp.ClientMode.Http">
            <summary>
            Client will only use the http/rest client of Stoat and removes any usage/memory of websocket stuff. 
            </summary>
        </member>
        <member name="F:StoatSharp.ClientMode.WebSocket">
            <summary>
            Will use both WebSocket and http/rest client so you can get cached data for <see cref="T:StoatSharp.User"/>, <see cref="T:StoatSharp.Server"/> and <see cref="T:StoatSharp.Channel"/>
            </summary>
        </member>
        <member name="T:StoatSharp.StoatClientHelper">
            <summary>
            Stoat client methods.
            </summary>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetRole(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a server <see cref="T:StoatSharp.Role" /> from the websocket cache.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Role" /> or <see langword="null" />
            </returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetRole(StoatSharp.StoatClient,System.String,StoatSharp.Role@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetRole(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetEmoji(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a server <see cref="T:StoatSharp.Emoji" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.Emoji" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetEmoji(StoatSharp.StoatClient,System.String,StoatSharp.Emoji@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetEmoji(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetTextChannel(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a server <see cref="T:StoatSharp.TextChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.TextChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetTextChannel(StoatSharp.StoatClient,System.String,StoatSharp.TextChannel@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetTextChannel(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetVoiceChannel(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a server <see cref="T:StoatSharp.VoiceChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.VoiceChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetVoiceChannel(StoatSharp.StoatClient,System.String,StoatSharp.VoiceChannel@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetVoiceChannel(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetServer(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a <see cref="T:StoatSharp.Server" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.Server" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetServer(StoatSharp.StoatClient,System.String,StoatSharp.Server@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetServer(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetUser(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a <see cref="T:StoatSharp.User" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.User" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetUser(StoatSharp.StoatClient,System.String,StoatSharp.User@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetUser(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetChannel(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a <see cref="T:StoatSharp.Channel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.Channel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetChannel(StoatSharp.StoatClient,System.String,StoatSharp.Channel@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetChannel(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetGroupChannel(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a <see cref="T:StoatSharp.GroupChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.GroupChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetGroupChannel(StoatSharp.StoatClient,System.String,StoatSharp.GroupChannel@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetGroupChannel(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="M:StoatSharp.StoatClientHelper.GetDMChannel(StoatSharp.StoatClient,System.String)">
            <summary>
            Get a <see cref="T:StoatSharp.DMChannel" /> from the websocket cache.
            </summary>
            <returns><see cref="T:StoatSharp.DMChannel" /> or <see langword="null" /></returns>
        </member>
        <member name="M:StoatSharp.StoatClientHelper.TryGetDMChannel(StoatSharp.StoatClient,System.String,StoatSharp.DMChannel@)">
            <inheritdoc cref="M:StoatSharp.StoatClientHelper.GetDMChannel(StoatSharp.StoatClient,System.String)" />
        </member>
        <member name="T:StoatSharp.StoatException">
            <summary>
            Custom exception for the Stoat client.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatException.Code">
            <summary>
            The status code error for this exception if thrown by the rest client.
            </summary>
        </member>
        <member name="T:StoatSharp.StoatRestException">
            <summary>
            Custom exception for the Stoat rest client with code.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatRestException.Type">
            <summary>
            The type of rest error triggered.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatRestException.Permission">
            <summary>
            The permission require for the error <see cref="F:StoatSharp.StoatErrorType.MissingPermission"/> or <see cref="F:StoatSharp.StoatErrorType.MissingUserPermission"/>
            </summary>
        </member>
        <member name="T:StoatSharp.StoatPermissionException">
            <summary>
            Custom exception for the Stoat rest client for permission issues.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatPermissionException.Permission">
            <inheritdoc cref="P:StoatSharp.StoatRestException.Permission"/>
        </member>
        <member name="T:StoatSharp.StoatArgumentException">
            <summary>
            Custom exception for the Stoat client when user enters a missing or wrong argument.
            </summary>
        </member>
        <member name="T:StoatSharp.StoatLogger">
            <summary>
            Special logger class with custom title and console colors.
            </summary>
        </member>
        <member name="M:StoatSharp.StoatLogger.#ctor(System.String,StoatSharp.StoatLogSeverity)">
            <summary>
            Initialize your own logging system with a custom title and log mode.
            </summary>
            <param name="title"></param>
            <param name="logMode"></param>
        </member>
        <member name="F:StoatSharp.StoatLogger.Reset">
            <summary> Reset console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Red">
            <summary> Red console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightRed">
            <summary> Light Red console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Green">
            <summary> Green console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightGreen">
            <summary> Light Green console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Yellow">
            <summary> Yellow console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightYellow">
            <summary> Light Yellow console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Blue">
            <summary> Blue console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightBlue">
            <summary> Light Blue console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Magenta">
            <summary> Magenta console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightMagenta">
            <summary> Light Magenta console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Cyan">
            <summary> Cyan console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightCyan">
            <summary> Light Cyan console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.Grey">
            <summary> Grey console color </summary>
        </member>
        <member name="F:StoatSharp.StoatLogger.LightGrey">
            <summary> Light Grey console color </summary>
        </member>
        <member name="M:StoatSharp.StoatLogger.LogJson(System.String,System.Object)">
            <summary>
            Special json log message with json data that can be a json string or class/object
            </summary>
        </member>
        <member name="M:StoatSharp.StoatLogger.LogMessage(System.String,StoatSharp.StoatLogSeverity)">
            <summary>
            Log a message to the console with the severity color
            <para>Info: White</para>
            <para>Warn: Yellow</para>
            <para>Error: Red</para>
            <para>Debug: Grey</para>
            </summary>
        </member>
        <member name="M:StoatSharp.StoatLogger.LogRestMessage(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpMethod,System.String)">
            <summary>
            Log a rest response to the console with the color
            <para>Success: Green</para>
            <para>Fail: Light Red</para>
            </summary>
        </member>
        <member name="T:StoatSharp.StoatLogSeverity">
            <summary>
            The severity of a log message raised by <see cref="E:StoatSharp.StoatClient.OnLog"/>.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatLogSeverity.Debug">
            <summary>
            All messages including debug ones.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatLogSeverity.Error">
            <summary>
            Error message info.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatLogSeverity.Warn">
            <summary>
            Log info and warning messages.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatLogSeverity.Info">
            <summary>
            Only log info messages.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatLogSeverity.None">
            <summary>
            Do not log anything.
            </summary>
        </member>
        <member name="T:StoatSharp.PublicBot">
            <summary>
            Info about a public bot on Stoat.
            </summary>
        </member>
        <member name="P:StoatSharp.PublicBot.Username">
            <summary>
            The username of the bot.
            </summary>
        </member>
        <member name="P:StoatSharp.PublicBot.AvatarId">
            <summary>
            The avatar id of the bot.
            </summary>
        </member>
        <member name="M:StoatSharp.PublicBot.GetAvatarUrl(StoatSharp.AvatarSources)">
            <summary>
            Gets the bot's avatar.
            </summary>
            <param name="which">Which avatar to return.</param>
            <returns>URL of the image</returns>
        </member>
        <member name="P:StoatSharp.PublicBot.Description">
            <summary>
            The description of the bot.
            </summary>
        </member>
        <member name="M:StoatSharp.PublicBot.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Bot username </returns>
        </member>
        <member name="T:StoatSharp.Channel">
            <summary>
            Stoat channel that can be casted to types <see cref="T:StoatSharp.GroupChannel"/>, <see cref="T:StoatSharp.TextChannel"/>, <see cref="T:StoatSharp.VoiceChannel"/> <see cref="T:StoatSharp.ServerChannel" /> <see cref="T:StoatSharp.UnknownServerChannel" /> or <see cref="T:StoatSharp.UnknownChannel"/>
            </summary>
        </member>
        <member name="P:StoatSharp.Channel.Id">
            <summary>
            Id of the channel.
            </summary>
        </member>
        <member name="P:StoatSharp.Channel.CreatedAt">
            <summary>
            Date of when the channel was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Channel.Type">
            <summary>
            The channel type to cast to.
            </summary>
        </member>
        <member name="M:StoatSharp.Channel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Channel </returns>
        </member>
        <member name="T:StoatSharp.DMChannel">
            <summary>
            A channel between the current user/bot account and another user.
            </summary>
        </member>
        <member name="P:StoatSharp.DMChannel.Active">
            <summary>
            If the channel is still open for both users.
            </summary>
        </member>
        <member name="P:StoatSharp.DMChannel.UserId">
            <summary>
            The user id for this DM channel.
            </summary>
        </member>
        <member name="P:StoatSharp.DMChannel.User">
            <summary>
            The user for this DM channel.
            </summary>
        </member>
        <member name="P:StoatSharp.DMChannel.LastMessageId">
            <summary>
            The last message id sent in this DM channel.
            </summary>
        </member>
        <member name="M:StoatSharp.DMChannel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> User#0001 or Unknown User </returns>
        </member>
        <member name="T:StoatSharp.GroupChannel">
            <summary>
            Private group channel with a list of user
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Permissions">
            <summary>
            Default permissions for all users
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Recipents">
            <summary>
            The user IDs in the group channel.
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Users">
            <summary>
            List of users in the channel
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.LastMessageId">
            <summary>
            The last message id sent in this Group channel.
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.OwnerId">
            <summary>
            Owner of the group channel.
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Owner">
            <summary>
            The owner of the group channel.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.GroupChannel.Name">
            <summary>
            Name of the channel
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Description">
            <summary>
            Description of the channel
            </summary>
        </member>
        <member name="P:StoatSharp.GroupChannel.Icon">
            <summary>
            Icon attachment of the channel
            </summary>
            <remarks>
            This may be <see langword="null" />
            </remarks>
        </member>
        <member name="P:StoatSharp.GroupChannel.IsNsfw">
            <summary>
            Channel has nsfw content
            </summary>
        </member>
        <member name="M:StoatSharp.GroupChannel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Group channel name </returns>
        </member>
        <member name="T:StoatSharp.SavedMessagesChannel">
            <summary>
            A private notes channel for the current user.
            </summary>
        </member>
        <member name="P:StoatSharp.SavedMessagesChannel.LastMessageId">
            <summary>
            The last message id sent in this DM channel.
            </summary>
        </member>
        <member name="M:StoatSharp.SavedMessagesChannel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> CurrentUser#0001 </returns>
        </member>
        <member name="T:StoatSharp.ServerChannel">
            <summary>
            Base channel for all servers that can be casted to <see cref="T:StoatSharp.TextChannel" /> <see cref="T:StoatSharp.VoiceChannel" /> or <see cref="T:StoatSharp.UnknownServerChannel" />
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.ServerId">
            <summary>
            If of the parent server
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.Server">
            <summary>
            Parent server of the channel
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.ServerChannel.DefaultPermissions">
            <summary>
            Default permissions for all members in the channel
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.InternalRolePermissions">
            <summary>
            Role permission for the channel that wil override default permissions
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.RolePermissions">
            <summary>
            Role permission for the channel that wil override default permissions
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.Name">
            <summary>
            Name of the channel
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.Description">
            <summary>
            Description of the channel
            </summary>
        </member>
        <member name="P:StoatSharp.ServerChannel.Icon">
            <summary>
            Icon attachment of the channel
            </summary>
            <remarks>
            This may be <see langword="null" />
            </remarks>
        </member>
        <member name="M:StoatSharp.ServerChannel.HasPermission(StoatSharp.ServerMember,StoatSharp.ChannelPermission)">
            <summary>
            Check if a member has a permission for the channel
            </summary>
            <param name="member"></param>
            <param name="permission"></param>
            <returns><see langword="true" /> if member has permission</returns>
        </member>
        <member name="M:StoatSharp.ServerChannel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Server channel name </returns>
        </member>
        <member name="T:StoatSharp.TextChannel">
            <summary>
            Server text channel that members can talk in.
            </summary>
        </member>
        <member name="P:StoatSharp.TextChannel.LastMessageId">
            <summary>
            The last message id sent in this Text channel.
            </summary>
        </member>
        <member name="P:StoatSharp.TextChannel.IsNsfw">
            <summary>
            Channel has nsfw content.
            </summary>
        </member>
        <member name="T:StoatSharp.UnknownChannel">
            <summary>
            Channel is an unknown type that can't be fully used 
            </summary>
        </member>
        <member name="M:StoatSharp.UnknownChannel.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Unknown Channel </returns>
        </member>
        <member name="T:StoatSharp.UnknownServerChannel">
            <summary>
            Channel is an unknown type that can't be fully used
            </summary>
        </member>
        <member name="T:StoatSharp.VoiceChannel">
            <summary>
            Channel that members can speak in to other members
            </summary>
        </member>
        <member name="T:StoatSharp.Query">
            <summary>
            Query information about the connected Stoat instance.
            </summary>
        </member>
        <member name="T:StoatSharp.Emoji">
            <summary>
            Server or default emoji
            </summary>
        </member>
        <member name="M:StoatSharp.Emoji.#ctor(System.String,System.Boolean)">
            <summary>
            Parse the emoji format or id to use for reactions.
            </summary>
            <param name="emoji"></param>
            <param name="parseDefaultEmojis"></param>
        </member>
        <member name="P:StoatSharp.Emoji.Id">
            <summary>
            Id of the emoji.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.CreatedAt">
            <summary>
            Date of when the emoji was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.Name">
            <summary>
            The name of the emoji.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.IsServerEmoji">
            <summary>
            Is this emoji from a server.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.ServerId">
            <summary>
            The server id of where the emoji is from.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.Server">
            <summary>
            Server that the Emoji is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.Emoji.CreatorId">
            <summary>
            The user id that created this emoji.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.IsAnimated">
            <summary>
            Is the emoji animated.
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.IsNsfw">
            <summary>
            Is the emoji not safe for work (+18).
            </summary>
        </member>
        <member name="P:StoatSharp.Emoji.ImageUrl">
            <summary>
            The image url of the emoji or empty if unicode.
            </summary>
        </member>
        <member name="M:StoatSharp.Emoji.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Emoji name or unicode </returns>
        </member>
        <member name="M:StoatSharp.Emoji.ParseName(System.String)">
            <summary>
            Parse a default emoji by name or fail
            </summary>
            <param name="name"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:StoatSharp.Emoji.TryParseName(System.String,System.String@)">
            <summary>
            Try parse a default emoji by name.
            </summary>
            <param name="name"></param>
            <param name="emoji"></param>
            <returns><see cref="T:System.Boolean"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:StoatSharp.Entity">
            <summary>
            A Stoat object entity that has the client attached.
            </summary>
        </member>
        <member name="T:StoatSharp.CreatedEntity">
            <summary>
            A Stoat object entity that has an ID, Created date and Client.
            </summary>
        </member>
        <member name="P:StoatSharp.CreatedEntity.Id">
            <summary>
            Id of the object.
            </summary>
        </member>
        <member name="P:StoatSharp.CreatedEntity.CreatedAt">
            <summary>
            Date of when the object was created.
            </summary>
        </member>
        <member name="T:StoatSharp.ChannelPermission">
            <summary>
            List of channel permissions.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.ManageChannel">
            <summary>
            Can edit the channel info, icon, description or delete the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.ManagePermissions">
            <summary>
            Can change the permissions of the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.ViewChannel">
            <summary>
            Can view the channel and messages.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.SendMessages">
            <summary>
            Can send messages in the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.ManageMessages">
            <summary>
            Can moderate messages in the channel by deleting them or removing reactions.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.ManageWebhooks">
            <summary>
            Can create, edit and delete external webhooks.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.CreateInvites">
            <summary>
            Can create server invites for the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.SendEmbeds">
            <summary>
            Can send embed messages in the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.UploadFiles">
            <summary>
            Can upload files and images in the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.Masquerade">
            <summary>
            Can send fake author messages in the channel for use with bridged chats from other platforms.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.AddReactions">
            <summary>
            Can add reactions to messages in the channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceConnect">
            <summary>
            Can connect to the voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceSpeak">
            <summary>
            Can speak in the voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceVideo">
            <summary>
            Can use video in the voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceMuteMembers">
            <summary>
            Can mute other members in the voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceDeafenMembers">
            <summary>
            Can deafen other members in the voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermission.VoiceMoveMembers">
            <summary>
            Can move other members in the voice channel to other voice channels.
            </summary>
        </member>
        <member name="T:StoatSharp.ChannelPermissions">
            <summary>
            Permissions for the channel that the role can or can't use
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelPermissions.AllChannelPermissions">
            <summary>
            Get all channel permissions which can be given.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.Server">
            <summary>
            The server that these permissions are from.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.RawAllowed">
            <summary>
            Raw permissions number that has been allowed for the role.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.RawDenied">
            <summary>
            Raw permissions number that has been denied for the role.
            </summary>
        </member>
        <member name="M:StoatSharp.ChannelPermissions.ToList">
            <summary>
            List of channel permissions as single enum values.
            </summary>
            <returns>List of <see cref="T:StoatSharp.ChannelPermission"/></returns>
        </member>
        <member name="M:StoatSharp.ChannelPermissions.Has(StoatSharp.ServerPermission)">
            <summary>
            Check if the channel role override has a specific channel permission. 
            </summary>
            <returns><see langword="bool" /></returns>
        </member>
        <member name="M:StoatSharp.ChannelPermissions.Has(StoatSharp.ChannelPermission)">
            <summary>
            Check if the channel role override has a specific channel permission. 
            </summary>
            <returns><see langword="bool" /></returns>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.ManageChannel">
            <summary>
            User can modify and delete this server channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.ManagePermissions">
            <summary>
            User can modify this channel's permissions.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.ViewChanel">
            <summary>
            User can view this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.SendMessages">
            <summary>
            User can send messages in this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.ManageMessages">
            <summary>
            User can delete messages in this channel from other users.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.ManageWebhooks">
            <summary>
            User can create, delete and modify this channel's webhooks.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.CreateInvites">
            <summary>
            User can create invites for this channel to invite other users to the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.EmbedLinks">
            <summary>
            User can embed links in this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.UploadFiles">
            <summary>
            User can upload files in this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.Masquerade">
            <summary>
            User can send masquerade messages with a custom name and avatar in this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.AddReactions">
            <summary>
            User can add reactions to messages in this channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceConnect">
            <summary>
            User can connect to this voice channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceSpeak">
            <summary>
            User can speak in this voice channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceVideo">
            <summary>
            User can use video in this voice channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceMuteMembers">
            <summary>
            User can mute other users in this voice channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceDeafenMembers">
            <summary>
            User can deafen other users in this voice channel.
            </summary>
        </member>
        <member name="P:StoatSharp.ChannelPermissions.VoiceMoveMembers">
            <summary>
            User can move other users to this voice channel.
            </summary>
        </member>
        <member name="T:StoatSharp.ChannelType">
            <summary>
            Type of channel that is <see cref="T:StoatSharp.TextChannel" />, <see cref="T:StoatSharp.VoiceChannel" />, <see cref="T:StoatSharp.GroupChannel" />, <see cref="T:StoatSharp.UnknownServerChannel" /> or <see cref="T:StoatSharp.UnknownChannel" />
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.Unknown">
            <summary>
            Unknown channel type that could not be parsed.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.Text">
            <summary>
            A Text channel that can send and recieve messages.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.Voice">
            <summary>
            A Voice channel that can be used to talk or show video calls with others.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.SavedMessages">
            <summary>
            A private notes channels for the current user.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.Group">
            <summary>
            A private group of users.
            </summary>
        </member>
        <member name="F:StoatSharp.ChannelType.DM">
            <summary>
            A private channel between another user.
            </summary>
        </member>
        <member name="T:StoatSharp.MessageFlag">
            <summary>
            List of message flags.
            </summary>
        </member>
        <member name="F:StoatSharp.MessageFlag.SupressNotifications">
            <summary>
            Message has supressed notifications for other users.
            </summary>
        </member>
        <member name="F:StoatSharp.MessageFlag.MentionsEveryone">
            <summary>
            Message has mentioned all members.
            </summary>
        </member>
        <member name="F:StoatSharp.MessageFlag.MentionsOnline">
            <summary>
            Message has mentioned online members.
            </summary>
        </member>
        <member name="T:StoatSharp.ServerPermission">
            <summary>
            List of server permissions
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageChannels">
            <summary>
            Can create/delete channels and edit channel info for all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageServer">
            <summary>
            Can edit the server info such as name and icon.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManagePermissions">
            <summary>
            Can modify the permissions for all roles in the server below their current role rank.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageRoles">
            <summary>
            Can create, edit and delete all roles in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageCustomisation">
            <summary>
            Can create and delete emojis in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.KickMembers">
            <summary>
            Can kick members from the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.BanMembers">
            <summary>
            Can ban members from the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.TimeoutMembers">
            <summary>
            Can mute members in the server from chatting.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.AssignRoles">
            <summary>
            Can give other members's a role that is below their current role rank.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ChangeNickname">
            <summary>
            Can change their own nickname in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageNicknames">
            <summary>
            Can change the nickname of other members in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ChangeAvatar">
            <summary>
            Can change their own avatar in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageAvatars">
            <summary>
            Can reset other member's avatars in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ViewChannels">
            <summary>
            Can view all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.SendMessages">
            <summary>
            Can send messages to all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageMessages">
            <summary>
            Can moderate messages in all channels by deleting them or removing reactions.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.ManageWebhooks">
            <summary>
            Can create, edit and delete external webhooks in all channels.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.CreateInvites">
            <summary>
            Can create server invites to all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.SendEmbeds">
            <summary>
            Can send embed messages to all channels in the server
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.UploadFiles">
            <summary>
            Can upload files and images to all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.Masquerade">
            <summary>
            Can send fake author messages in the channel for use with bridged chats from other platforms to all channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.AddReactions">
            <summary>
            Can add reactions to all channels with messages in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceConnect">
            <summary>
            Can connect to all voice channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceSpeak">
            <summary>
            Can speak in all voice channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceVideo">
            <summary>
            Can use video in all voice channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceMuteMembers">
            <summary>
            Can mute other members in all voice channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceDeafenMembers">
            <summary>
            Can deafen other members in all voice channels in the server.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermission.VoiceMoveMembers">
            <summary>
            Can move other members in all voice channels to other voice channels in the server.
            </summary>
        </member>
        <member name="T:StoatSharp.ServerPermissions">
            <summary>
            Permissions for the server that members can or can't use.
            </summary>
        </member>
        <member name="F:StoatSharp.ServerPermissions.AllServerPermissions">
            <summary>
            Get all server permissions which can be given.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.Server">
            <summary>
            The server that these permissions are from.
            </summary>
        </member>
        <member name="M:StoatSharp.ServerPermissions.ToList">
            <summary>
            List of server permissions as single enum values.
            </summary>
            <returns>List of <see cref="T:StoatSharp.ServerPermission"/></returns>
        </member>
        <member name="P:StoatSharp.ServerPermissions.Raw">
            <summary>
            Raw permissions number for the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageChannels">
            <summary>
            User can modify and delete server channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageServer">
            <summary>
            User can modify server settings and invite bots.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManagePermissions">
            <summary>
            User can modify role permissions and channel permissions.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageRoles">
            <summary>
            User can create, delete and modify roles.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageCustomisation">
            <summary>
            User can create, delete and modify emojis.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.KickMembers">
            <summary>
            User can kick users from the server
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.BanMembers">
            <summary>
            User can ban users from the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.TimeoutMembers">
            <summary>
            User can mute/timeout a user from chatting in the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.AssignRoles">
            <summary>
            User can give other users a role.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ChangeNickname">
            <summary>
            User can change their server nickname.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageNicknames">
            <summary>
            User can modify other user's server nickname.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ChangeAvatar">
            <summary>
            User can change their server avatar.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageAvatars">
            <summary>
            User can reset another user's avatar.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ViewChannels">
            <summary>
            User can view channels in the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.SendMessages">
            <summary>
            User can send messages in channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageMessages">
            <summary>
            User can delete messages in channels from other users.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.ManageWebhooks">
            <summary>
            User can create, delete and modify channel webhooks.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.CreateInvites">
            <summary>
            User can create invites that other people can use to join the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.EmbedLinks">
            <summary>
            User can embed links in channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.UploadFiles">
            <summary>
            User can upload files in channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.Masquerade">
            <summary>
            User can send masquerade messages with a custom name and avatar.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.AddReactions">
            <summary>
            User can add reactions to messages in channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceConnect">
            <summary>
            User can connect to voice channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceSpeak">
            <summary>
            User can speak in voice channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceVideo">
            <summary>
            User can use video in voice channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceMuteMembers">
            <summary>
            User can mute other users in voice channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceDeafenMembers">
            <summary>
            User can deafen other users in voice channels.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerPermissions.VoiceMoveMembers">
            <summary>
            User can move other users to different voice channels.
            </summary>
        </member>
        <member name="M:StoatSharp.ServerPermissions.Has(StoatSharp.ServerPermission)">
            <summary>
            Check if the server role override has a specific server permission. 
            </summary>
            <returns><see langword="bool" /></returns>
        </member>
        <member name="M:StoatSharp.ServerPermissions.Has(StoatSharp.ChannelPermission)">
            <summary>
            Check if the server role override has a specific channel permission. 
            </summary>
            <returns><see langword="bool" /></returns>
        </member>
        <member name="T:StoatSharp.StoatErrorType">
            <summary>
            The error type for this request/function
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.Unknown">
            <summary>
            Unknown error type.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.AlreadyOnboarded">
            <summary>
            User is already onboarded
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UsernameTaken">
            <summary>
            Username is already taken.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidUsername">
            <summary>
            Invalid username that can't be used.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UnknownUser">
            <summary>
            Unknown user or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.AlreadyFriends">
            <summary>
            You are already friends with this user.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.AlreadySentRequest">
            <summary>
            You already send a friend request to this user.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.Blocked">
            <summary>
            You have blocked this user.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.BlockedByOther">
            <summary>
            This user has you blocked.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotFriends">
            <summary>
            You are not friends with this user.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UnknownChannel">
            <summary>
            Unknown channel or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UnknownAttachment">
            <summary>
            Unknown attachment or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UnknownMessage">
            <summary>
            Unknown message or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.CannotEditMessage">
            <summary>
            You can't edit other user's messages.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.CannotJoinCall">
            <summary>
            You can't join this voice channel.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.TooManyAttachments">
            <summary>
            Too many attachments for the sent message.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.TooManyReplies">
            <summary>
            Too many replies for the sent message.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.EmptyMessage">
            <summary>
            Message is empty or has no data.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.PayloadTooLarge">
            <summary>
            Request payload is too large.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.CannotRemoveYourself">
            <summary>
            You cannot remove yourself from the server?
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.GroupTooLarge">
            <summary>
            Group has hit the max limit of users.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.AlreadyInGroup">
            <summary>
            You are already in this group.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotInGroup">
            <summary>
            You or a user is not in the group?
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.UnknownServer">
            <summary>
            Unknown server or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidRole">
            <summary>
            Unknown role or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.Banned">
            <summary>
            You are banned from this server.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.TooManyServers">
            <summary>
            You have hit the max server limit for your account.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.TooManyEmoji">
            <summary>
            This server has hit the max emojis limit.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.ReachedMaximumBots">
            <summary>
            You have hit the max bots created for your account.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotAllowedForBots">
            <summary>
            This request/function is not allowed for bot accounts.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotAllowedForUsers">
            <summary>
            This request/function is not allowed for normal user accounts.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.BotIsPrivate">
            <summary>
            You can't invite this bot because it's private.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.CannotReportYourself">
            <summary>
            You can't report your own messages.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.MissingPermission">
            <summary>
            You are missing permissions for this request/function to use.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.MissingUserPermission">
            <summary>
            You are missing permissions for this request/function to use.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotElevated">
            <summary>
            You need to have global instance admin for this request/function to use.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotPrivileged">
            <summary>
            You need to have global instance admin for this request/function to use.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.CannotGiveMissingPermissions">
            <summary>
            You can't modify permissions that you don't have.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotOwner">
            <summary>
            You are not the owner of this group/server
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.DatabaseError">
            <summary>
            A Stoat instance database issue has occured.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InternalServerError">
            <summary>
            A Stoat instance internal issue has occured.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidOperation">
            <summary>
            You can't use thie request/function
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidCredentials">
            <summary>
            You are not logged in or authorized correctly.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidProperty">
            <summary>
            Invalid object property for the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.InvalidSession">
            <summary>
            You are not logged in correctly.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.DuplicateNonce">
            <summary>
            Duplicate message nonce/unique message.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.VosoUnavailable">
            <summary>
            Voice server is unavailable.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NotFound">
            <summary>
            This object is missing or not found.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.NoEffect">
            <summary>
            This request/function has no effect.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.FailedValidation">
            <summary>
            Failed validation for the request/function
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.OnboardingNotFinished">
            <summary>
            You have not finished onboarding for the current user.
            </summary>
        </member>
        <member name="F:StoatSharp.StoatErrorType.AlreadyAuthenticated">
            <summary>
            You are already authenticated.
            </summary>
        </member>
        <member name="T:StoatSharp.Attachment">
            <summary>
            Stoat file attachment for messages which could by any type including an image.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Id">
            <summary>
            Id of the attachment.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.CreatedAt">
            <summary>
            Date of when the attachment was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Tag">
            <summary>
            The type of attachment used avatar, banner, icon, ect.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Filename">
            <summary>
            The original file name of the attachment.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Type">
            <summary>
            The file mime type of the attachment.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.FileSize">
            <summary>
            The size of the file attachment.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Width">
            <summary>
            The width of the image if the file is an image type.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Height">
            <summary>
            The height of the image if the file is an image type.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Deleted">
            <summary>
            File has been deleted.
            </summary>
        </member>
        <member name="P:StoatSharp.Attachment.Reported">
            <summary>
            File has been reported by a user.
            </summary>
        </member>
        <member name="M:StoatSharp.Attachment.GetUrl">
            <summary>
            The URL of the attachment.
            </summary>
        </member>
        <member name="M:StoatSharp.Attachment.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> File.png </returns>
        </member>
        <member name="T:StoatSharp.AttachmentType">
            <summary>
            The type of attachment this is.
            </summary>
        </member>
        <member name="F:StoatSharp.AttachmentType.File">
            <summary>
            Generic file type with no category.
            </summary>
        </member>
        <member name="F:StoatSharp.AttachmentType.Text">
            <summary>
            File contains text.
            </summary>
        </member>
        <member name="F:StoatSharp.AttachmentType.Image">
            <summary>
            File is an image such as png, jpg, webp
            </summary>
        </member>
        <member name="F:StoatSharp.AttachmentType.Video">
            <summary>
            File is a video such as mp4, mkv
            </summary>
        </member>
        <member name="F:StoatSharp.AttachmentType.Audio">
            <summary>
            File is an audio such as mp3, wav
            </summary>
        </member>
        <member name="T:StoatSharp.EmbedBuilder">
            <summary>
            Create a embed to use for messages
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.Image">
            <summary>
            Embed image attachment
            </summary>
        </member>
        <member name="P:StoatSharp.EmbedBuilder.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetTitle(System.String)">
            <summary>
            Set embed title
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetUrl(System.String)">
            <summary>
            Set embed url
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetIconUrl(System.String)">
            <summary>
            Set embed icon url
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetDescription(System.String)">
            <summary>
            Set embed description
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetImage(System.String)">
            <summary>
            Set embed image
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.SetColor(StoatSharp.StoatColor)">
            <summary>
            Set embed color
            </summary>
        </member>
        <member name="M:StoatSharp.EmbedBuilder.Build">
            <summary>
            Build the embed to use it in messages
            </summary>
            <returns><see cref="T:StoatSharp.Embed" /></returns>
        </member>
        <member name="T:StoatSharp.MessageEmbed">
            <summary>
            A message embed with content and images.
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Type">
            <summary>
            Type of embed
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Site">
            <summary>
            Embed site name
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Image">
            <summary>
            Embed image attachment
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Media">
            <summary>
            The attachment object for the image?
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Video">
            <summary>
            Embed video attachment
            </summary>
        </member>
        <member name="P:StoatSharp.MessageEmbed.Provider">
            <summary>
            Embed provider
            </summary>
        </member>
        <member name="T:StoatSharp.Embed">
            <summary>
            Message embeds
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.Url">
            <summary>
            Embed url
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.IconUrl">
            <summary>
            Embed icon url
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.Title">
            <summary>
            Embed title
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.Description">
            <summary>
            Embed description
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.Image">
            <summary>
            Embed image url
            </summary>
        </member>
        <member name="P:StoatSharp.Embed.Color">
            <summary>
            Embed color
            </summary>
        </member>
        <member name="T:StoatSharp.FileAttachment">
            <summary>
            Uploaded file attachment that can be used in other requests such as CreateEmojiAsync
            </summary>
        </member>
        <member name="P:StoatSharp.FileAttachment.Id">
            <summary>
            Id of the attachment.
            </summary>
        </member>
        <member name="P:StoatSharp.FileAttachment.CreatedAt">
            <summary>
            Date of when the attachment was created.
            </summary>
        </member>
        <member name="T:StoatSharp.Message">
            <summary>
            Base chat messages that can be casted to <see cref="T:StoatSharp.UserMessage"/> or <see cref="T:StoatSharp.SystemMessage`1"/>
            </summary>
        </member>
        <member name="P:StoatSharp.Message.Id">
            <summary>
            Id of the message.
            </summary>
        </member>
        <member name="P:StoatSharp.Message.Content">
            <summary>
            Content of the message.
            </summary>
        </member>
        <member name="P:StoatSharp.Message.CreatedAt">
            <summary>
            Date of when the message was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Message.ChannelId">
            <summary>
            Parent channel id of the message
            </summary>
        </member>
        <member name="P:StoatSharp.Message.Channel">
            <summary>
            Channel that the Message is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.Message.Server">
            <summary>
            Server that the Message is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/> or invalid channel context.
            </remarks>
        </member>
        <member name="P:StoatSharp.Message.AuthorId">
            <summary>
            Id of the user who posted the message
            </summary>
        </member>
        <member name="P:StoatSharp.Message.Author">
            <summary>
            User who posted the message
            </summary>
            <remarks>
            Will be <see langword="null" /> if client is rest mode or system/webhook messages.
            </remarks>
        </member>
        <member name="P:StoatSharp.Message.Member">
            <summary>
            Member who posted the message
            </summary>
            <remarks>
            Will be <see langword="null" /> if user is not in the server, client is rest mode or system/webhook messages.
            </remarks>
        </member>
        <member name="P:StoatSharp.Message.Type">
            <summary>
            Get the type of message this is.
            </summary>
        </member>
        <member name="M:StoatSharp.Message.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> User/bot/system message </returns>
        </member>
        <member name="T:StoatSharp.MessageType">
            <summary>
            The type of message this is.
            </summary>
        </member>
        <member name="M:StoatSharp.MessageMasquerade.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Masquerade name </returns>
        </member>
        <member name="T:StoatSharp.SystemData">
            <summary>
            Raw system data for the system message.
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUnknown">
            <summary>
            Unknown system messages
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataText">
            <summary>
            System message with text content
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserAdded">
            <summary>
            User has been added to a group channel
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserRemoved">
            <summary>
            User has been removed from the group channel
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserJoined">
            <summary>
            Member has joined the server
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserLeft">
            <summary>
            Member has left the server
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserKicked">
            <summary>
            Member has been kicked from the server
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataUserBanned">
            <summary>
            Member has been banned from the server
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataChannelRenamed">
            <summary>
            Group channel name has been changed
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataChannelDescriptionChanged">
            <summary>
            Group channel description has been changed
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataChannelIconChanged">
            <summary>
            Group channel icon has been changed
            </summary>
        </member>
        <member name="T:StoatSharp.SystemDataChannelOwnershipChanged">
            <summary>
            Group channel ownership has been changed
            </summary>
        </member>
        <member name="T:StoatSharp.SystemMessage`1">
            <summary>
            System messages sent by Stoat for information/changes.
            </summary>
            <typeparam name="Type"></typeparam>
        </member>
        <member name="P:StoatSharp.SystemMessage`1.Data">
            <summary>
            The content data of this system message.
            </summary>
        </member>
        <member name="P:StoatSharp.SystemMessage`1.SystemType">
            <summary>
            The type of system message this is.
            </summary>
        </member>
        <member name="M:StoatSharp.SystemMessage`1.ToString">
            <summary> Returns a string that represents the current object.</summary>
        </member>
        <member name="F:StoatSharp.SystemType.Unknown">
            <summary>
            Unknown system message type.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.Text">
            <summary>
            System message with text.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupUserAdded">
            <summary>
            User has been added to the group.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupUserRemoved">
            <summary>
            User has been removed from the group.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.ServerUserJoined">
            <summary>
            User has joined the server.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.ServerUserLeft">
            <summary>
            User has left the server.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.ServerUserKicked">
            <summary>
            User has been kicked from the server.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.ServerUserBanned">
            <summary>
            User has been banned from the server.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupNameChanged">
            <summary>
            Group channel name has been changed.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupDescriptionChanged">
            <summary>
            Group channel description has been changed.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupIconChanged">
            <summary>
            Group channel icon has been changed.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.GroupOwnerChanged">
            <summary>
            Group channel owner has been changed.
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.MessagePinned">
            <summary>
            Message has been pinned
            </summary>
        </member>
        <member name="F:StoatSharp.SystemType.MessageUnPinned">
            <summary>
            Message has been unpinned
            </summary>
        </member>
        <member name="T:StoatSharp.UserMessage">
            <summary>
            User messages sent with text, author, attachments, embeds, replies, mentions and optional parent server.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Attachments">
            <summary>
            File attachments for the message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.UserMentions">
            <summary>
            User Mentions in this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.RoleMentions">
            <summary>
            Role Mentions in this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Replies">
            <summary>
            Replies in this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.EditedAt">
            <summary>
            The date of the edited message or <see langword="null" />
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Embeds">
            <summary>
            Embeds in this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Reactions">
            <summary>
            Reactions on this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.ReactionsRaw">
            <summary>
            The raw reaction type to user ids list.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Masquerade">
            <summary>
            Masquerade options for this message.
            </summary>
        </member>
        <member name="P:StoatSharp.UserMessage.Webhook">
            <summary>
            Webhook info for this message.
            </summary>
        </member>
        <member name="M:StoatSharp.UserMessage.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> User message </returns>
        </member>
        <member name="T:StoatSharp.Invite">
            <summary>
            Server invite
            </summary>
        </member>
        <member name="M:StoatSharp.Invite.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Channel name invite </returns>
        </member>
        <member name="T:StoatSharp.Role">
            <summary>
            Server role
            </summary>
        </member>
        <member name="P:StoatSharp.Role.Id">
            <summary>
            Id of the role.
            </summary>
        </member>
        <member name="P:StoatSharp.Role.CreatedAt">
            <summary>
            Date of when the role was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Role.Server">
            <summary>
            Server that the Role is from.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="M:StoatSharp.Role.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Role name </returns>
        </member>
        <member name="P:StoatSharp.Server.Id">
            <summary>
            Id of the server.
            </summary>
        </member>
        <member name="P:StoatSharp.Server.CreatedAt">
            <summary>
            Date of when the server was created.
            </summary>
        </member>
        <member name="P:StoatSharp.Server.Name">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:StoatSharp.Server.Description">
            <summary>
            Description for the server
            </summary>
        </member>
        <member name="P:StoatSharp.Server.ChannelCount">
            <summary>
            Get the actual channel count of the server regardless of permissions.
            </summary>
        </member>
        <member name="P:StoatSharp.Server.HasAllMembers">
            <summary>
            Server has all members downloaded to cache.
            </summary>
        </member>
        <member name="P:StoatSharp.Server.TextChannels">
            <summary>
            List of text channels for the server.
            </summary>
            <remarks>
            This will only show channels the bot has permission for.
            </remarks>
        </member>
        <member name="P:StoatSharp.Server.VoiceChannels">
            <summary>
            List of voice channels for the server.
            </summary>
            <remarks>
            This will only show channels the bot has permission for.
            </remarks>
        </member>
        <member name="M:StoatSharp.Server.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Server name </returns>
        </member>
        <member name="P:StoatSharp.ServerBan.Id">
            <summary>
            Id of the ban.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerBan.CreatedAt">
            <summary>
            Date of when the ban occured.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerBan.Username">
            <summary>
            Username of the banned user.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerBan.Discriminator">
            <summary>
            Unique identity number of the banned user.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerBan.Reason">
            <summary>
            Reason for ban creation.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerBan.Tag">
            <summary>
            Get the username and discriminator of the user.
            </summary>
        </member>
        <member name="M:StoatSharp.ServerBan.GetAvatarUrl(StoatSharp.AvatarSources)">
            <summary>
            Gets the user's avatar.
            </summary>
            <param name="which">Which avatar to return.</param>
            <param name="size"></param>
            <returns>URL of the image</returns>
        </member>
        <member name="M:StoatSharp.ServerBan.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Name#0001 ban </returns>
        </member>
        <member name="T:StoatSharp.ServerMember">
            <summary>
            A user that is a member of a server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.Id">
            <summary>
            User ID of the parent user object.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.MemberId">
            <summary>
            Member ID of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.JoinedAt">
            <summary>
            UTC date time of when the user joined the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.ServerId">
            <summary>
            Server ID that the user is in.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.Server">
            <summary>
            Server that the Member is in.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.ServerMember.Nickname">
            <summary>
            Custom server nickname that user has set.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.User">
            <summary>
            The parent user object of this member.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.CurrentName">
            <summary>
            Get the current name of this user from the nickname, display name or username.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.ServerAvatar">
            <summary>
            The avatar attachment for the custom member's avatar.
            </summary>
            <remarks>
            Will be <see langword="null" /> if member has no avatar set.
            </remarks>
        </member>
        <member name="M:StoatSharp.ServerMember.GetAvatarUrl(StoatSharp.AvatarSources)">
            <inheritdoc cref="M:StoatSharp.User.GetAvatarUrl(StoatSharp.AvatarSources)"/>
        </member>
        <member name="P:StoatSharp.ServerMember.RolesIds">
            <summary>
            List of role IDs that the member has.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.Timeout">
            <summary>
            The member is timed out/muted with the specified date time.
            </summary>
            <remarks>
            Will be null if member is not timed out/muted.
            </remarks>
        </member>
        <member name="P:StoatSharp.ServerMember.IsTimedOut">
            <summary>
            The member is currently timed out/muted.
            </summary>
            <remarks>
            They will not be able to send messsages in the server.
            </remarks>
        </member>
        <member name="M:StoatSharp.ServerMember.GetRole(System.String)">
            <summary>
            Get a role the member has.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/> or no Role found.
            </remarks>
        </member>
        <member name="P:StoatSharp.ServerMember.Permissions">
            <summary>
            The member has these permissions in the server.
            </summary>
        </member>
        <member name="P:StoatSharp.ServerMember.CreatedAt">
            <inheritdoc cref="P:StoatSharp.User.CreatedAt"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Username">
            <inheritdoc cref="P:StoatSharp.User.Username"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Discriminator">
            <inheritdoc cref="P:StoatSharp.User.Discriminator"/>
        </member>
        <member name="P:StoatSharp.ServerMember.DisplayName">
            <inheritdoc cref="P:StoatSharp.User.DisplayName"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Tag">
            <inheritdoc cref="P:StoatSharp.User.Tag"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Mention">
            <inheritdoc cref="P:StoatSharp.User.Mention"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Status">
            <inheritdoc cref="P:StoatSharp.User.Status"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Avatar">
            <inheritdoc cref="P:StoatSharp.User.Avatar"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Badges">
            <inheritdoc cref="P:StoatSharp.User.Badges"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Flags">
            <inheritdoc cref="P:StoatSharp.User.Flags"/>
        </member>
        <member name="P:StoatSharp.ServerMember.BotData">
            <inheritdoc cref="P:StoatSharp.User.BotData"/>
        </member>
        <member name="P:StoatSharp.ServerMember.IsOnline">
            <inheritdoc cref="P:StoatSharp.User.IsOnline"/>
        </member>
        <member name="P:StoatSharp.ServerMember.IsPrivileged">
            <inheritdoc cref="P:StoatSharp.User.IsPrivileged"/>
        </member>
        <member name="P:StoatSharp.ServerMember.Relationship">
            <inheritdoc cref="P:StoatSharp.User.Relationship"/>
        </member>
        <member name="P:StoatSharp.ServerMember.IsBot">
            <inheritdoc cref="P:StoatSharp.User.IsBot"/>
        </member>
        <member name="P:StoatSharp.ServerMember.IsBlocked">
            <inheritdoc cref="P:StoatSharp.User.IsBlocked"/>
        </member>
        <member name="P:StoatSharp.ServerMember.MutualDMs">
            <inheritdoc cref="P:StoatSharp.User.MutualDMs"/>
        </member>
        <member name="P:StoatSharp.ServerMember.MutualServers">
            <inheritdoc cref="P:StoatSharp.User.MutualServers"/>
        </member>
        <member name="P:StoatSharp.ServerMember.MutualGroups">
            <inheritdoc cref="P:StoatSharp.User.MutualGroups"/>
        </member>
        <member name="M:StoatSharp.ServerMember.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Nickname, Display name or Username </returns>
        </member>
        <member name="T:StoatSharp.StoatColor">
            <summary>
            Represents a color in Stoat, with Hex and RGB values accepted.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Red">
            <summary>
            Represents the color red, or #FF0000.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.DarkRed">
            <summary>
            Represents a darker shade of red, or #8B0000.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Orange">
            <summary>
            Represents the color orange, or #FFA500.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Yellow">
            <summary>
            Represents the color yellow, or #FFFF00.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Green">
            <summary>
            Represents the color green, or #00FF00.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.DarkGreen">
            <summary>
            Represents a darker shade of green, or #006400.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Cyan">
            <summary>
            Represents the color cyan, or #00FFFF.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Blue">
            <summary>
            Represents the color blue, or #0000FF.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.DarkBlue">
            <summary>
            Represents a darker shade of blue, or #00008B.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Purple">
            <summary>
            Represents the color purple, or #800080.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Pink">
            <summary>
            Represents the color pink, or #FFC0CB.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Black">
            <summary>
            Represents the color black, or #000000.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.White">
            <summary>
            Represents the color white, or #FFFFFF.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.Gray">
            <summary>
            Represents the color gray, or #808080.
            </summary>
        </member>
        <member name="P:StoatSharp.StoatColor.NotQuiteBlack">
            <summary>
            Represents a color that's not quite black, or #36393F.
            </summary>
        </member>
        <member name="M:StoatSharp.StoatColor.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new StoatColor from a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The color to use</param>
        </member>
        <member name="M:StoatSharp.StoatColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new StoatColor from RGB values.
            </summary>
            <param name="r">The value of red (cannot be lower than 0 or higher than 255)</param>
            <param name="g">The value of green (cannot be lower than 0 or higher than 255)</param>
            <param name="b">The value of blue (cannot be lower than 0 or higher than 255)</param>
        </member>
        <member name="M:StoatSharp.StoatColor.#ctor(System.String)">
            <summary>
            Creates a new StoatColor from a hex string.
            </summary>
            <param name="hex">The hex code to use</param>
        </member>
        <member name="M:StoatSharp.StoatColor.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Color format </returns>
        </member>
        <member name="P:StoatSharp.MessageUpdatedProperties.Id">
            <summary>
            Id of the message.
            </summary>
        </member>
        <member name="P:StoatSharp.MessageUpdatedProperties.CreatedAt">
            <summary>
            Date of when the message was created.
            </summary>
        </member>
        <member name="P:StoatSharp.RoleUpdatedProperties.Id">
            <summary>
            Id of the role.
            </summary>
        </member>
        <member name="P:StoatSharp.RoleUpdatedProperties.CreatedAt">
            <summary>
            Date of when the role was created.
            </summary>
        </member>
        <member name="T:StoatSharp.UserUpdatedProperties">
            <summary>
            Properties that have been updated for the user.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.StatusText">
            <summary>
            Status text that has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Avatar">
            <summary>
            Avatar that has been updated or <see langword="null" /> if removed.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Online">
            <summary>
            User online status has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Privileged">
            <summary>
            User instance privileged has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Username">
            <summary>
            Username that has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Discriminator">
            <summary>
            Discriminator that has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.DisplayName">
            <summary>
            Display name that has been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Badges">
            <summary>
            Badges that have been updated.
            </summary>
        </member>
        <member name="P:StoatSharp.UserUpdatedProperties.Flags">
            <summary>
            User flags that have been updated.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.Default">
            <summary>
            Default Stoat avatar given to the user.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.User">
            <summary>
            The user's own avatar set.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.Server">
            <summary>
            The user's own server avatar set.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.UserOrDefault">
            <summary>
            The user's own avatar or fallback to default avatar.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.ServerOrUser">
            <summary>
            The user's own server avatar or fallback to user avatar.
            </summary>
        </member>
        <member name="F:StoatSharp.AvatarSources.Any">
            <summary>
            Use any of the server avatar, user avatar or default avatar.
            </summary>
        </member>
        <member name="P:StoatSharp.SelfUser.Owner">
            <summary>
            Get the Owner user of the bot.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="T:StoatSharp.User">
            <summary>
            A Stoat user with various data.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Id">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.CreatedAt">
            <summary>
            Date of when the user was created.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Username">
            <summary>
            Unique username of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Discriminator">
            <summary>
            Unique identity number of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.DisplayName">
            <summary>
            Get the display name of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.CurrentName">
            <summary>
            Get the display name or username of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Tag">
            <summary>
            Get the username and discriminator of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Mention">
            <summary>
            Get the mention format of the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Status">
            <summary>
            Status mode and text for the user.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Avatar">
            <summary>
            Avatar attachment for this user.
            </summary>
            <remarks>
            Will be <see langword="null" /> if the user has no custom avatar set.
            </remarks>
        </member>
        <member name="M:StoatSharp.User.GetAvatarUrl(StoatSharp.AvatarSources)">
            <summary>
            Gets the user's avatar.
            </summary>
            <param name="which">Which avatar to return.</param>
            <param name="size"></param>
            <returns>URL of the image</returns>
        </member>
        <member name="P:StoatSharp.User.Badges">
            <summary>
            Cool badges that the user has.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Flags">
            <summary>
            User has been marked with system settings such as <see cref="F:StoatSharp.UserFlagType.Suspended"/> or <see cref="F:StoatSharp.UserFlagType.Deleted"/>.
            </summary>
        </member>
        <member name="P:StoatSharp.User.BotData">
            <summary>
            The data for a bot account with owner property.
            </summary>
            <remarks>
            Will be <see langword="null" /> if the <see cref="T:StoatSharp.User"/> is not a bot account
            </remarks>
        </member>
        <member name="P:StoatSharp.User.IsOnline">
            <summary>
            Is the user currently online.
            </summary>
            <remarks>
            Will be <see langword="false" /> if status is also <see cref="F:StoatSharp.UserStatusType.Invisible"/>
            </remarks>
        </member>
        <member name="P:StoatSharp.User.IsPrivileged">
            <summary>
            Is the user a Stoat instance administrator.
            </summary>
        </member>
        <member name="P:StoatSharp.User.Relationship">
            <summary>
            The relationship type of the user compared to the current user/bot account.
            </summary>
        </member>
        <member name="P:StoatSharp.User.IsBot">
            <summary>
            Is the user a bot account or webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.User.IsWebhook">
            <summary>
            Is the user a webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.User.IsBlocked">
            <summary>
            Is ther user blocked by the current user/bot account.
            </summary>
        </member>
        <member name="P:StoatSharp.User.MutualDMs">
            <summary>
            Known mutual DM channels for the current user/bot account.
            </summary>
        </member>
        <member name="P:StoatSharp.User.MutualServers">
            <summary>
            Known mutual servers that this user has for the current user/bot account.
            </summary>
            <remarks>
            This may not be fully accurate.
            </remarks>
        </member>
        <member name="P:StoatSharp.User.MutualGroups">
            <summary>
            Known mutual group channels that this user has for the current user/bot account.
            </summary>
        </member>
        <member name="P:StoatSharp.User.HasMutuals">
            <summary>
            Does the user have mutual servers, groups or DMs for the current user/bot account.
            </summary>
            <remarks>
            This may not be fully accurate.
            </remarks>
        </member>
        <member name="M:StoatSharp.User.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Name#0001 </returns>
        </member>
        <member name="T:StoatSharp.BotData">
            <summary>
            Data for the bot account that this user is.
            </summary>
        </member>
        <member name="P:StoatSharp.BotData.OwnerId">
            <summary>
            Owner ID of the bot account.
            </summary>
        </member>
        <member name="T:StoatSharp.UserRelationship">
            <summary>
            Relationship type compared to the current user/bot account.
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.None">
            <summary>
            Default type
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.User">
            <summary>
            Idk shrug
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.Friend">
            <summary>
            User is a friend
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.Outgoing">
            <summary>
            User needs to accept a friend request
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.Incoming">
            <summary>
            You need to accept a friend request from the user
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.Blocked">
            <summary>
            The current user/bot has blocked this user
            </summary>
        </member>
        <member name="F:StoatSharp.UserRelationship.BlockedOther">
            <summary>
            The user has blocked the current user/bot
            </summary>
        </member>
        <member name="T:StoatSharp.UserBadges">
            <summary>
            Cool badges the user has.
            </summary>
        </member>
        <member name="P:StoatSharp.UserBadges.Raw">
            <summary>
            Not recommended to use, use <see cref="M:StoatSharp.UserBadges.Has(StoatSharp.UserBadgeType)"/> instead.
            </summary>
        </member>
        <member name="M:StoatSharp.UserBadges.Has(StoatSharp.UserBadgeType)">
            <summary>
            Check if a user has a badge.
            </summary>
            <param name="type">The type of badge to check</param>
            <returns><see langword="true" /> if user has this badge otherwise <see langword="false" /></returns>
        </member>
        <member name="T:StoatSharp.UserBadgeType">
            <summary>
            Cool badges for users :)
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.Developer">
            <summary>
            User is a Stoat developer that works on Stoat magic
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.Translator">
            <summary>
            User has helped translate Stoat or other Stoat related stuff.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.Supporter">
            <summary>
            User has supported the project by donating.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.ResponsibleDisclosure">
            <summary>
            User has disclosed a major bug or security issue.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.Founder">
            <summary>
            Hi insert :)
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.PlatformModeration">
            <summary>
            User has the power to moderate the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.ActiveSupporter">
            <summary>
            Active support for the Stoat project.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.Paw">
            <summary>
            OwO
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.EarlyAdopter">
            <summary>
            User was an early member/tester of the Stoat project.
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.ReservedRelevantJokeBadge1">
            <summary>
            Haha funny
            </summary>
        </member>
        <member name="F:StoatSharp.UserBadgeType.ReservedRelevantJokeBadge2">
            <summary>
            Haha memes
            </summary>
        </member>
        <member name="T:StoatSharp.UserFlags">
            <summary>
            System flags set for the user.
            </summary>
        </member>
        <member name="P:StoatSharp.UserFlags.Raw">
            <summary>
            Not recommended to use, use <see cref="M:StoatSharp.UserFlags.Has(StoatSharp.UserFlagType)"/> instead.
            </summary>
        </member>
        <member name="M:StoatSharp.UserFlags.Has(StoatSharp.UserFlagType)">
            <summary>
            Check if the user has a flag.
            </summary>
            <param name="type">The type of system flag to check</param>
            <returns><see langword="true" /> if user has the flag otherwise <see langword="false" /></returns>
        </member>
        <member name="T:StoatSharp.UserFlagType">
            <summary>
            System flags for the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.UserFlagType.Suspended">
            <summary>
            User has been suspended from using the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.UserFlagType.Deleted">
            <summary>
            User has deleted their account on the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.UserFlagType.Banned">
            <summary>
            User has been banned from the Stoat instance.
            </summary>
        </member>
        <member name="F:StoatSharp.UserFlagType.Spam">
            <summary>
            User has been banned for spam from the Stoat instance.
            </summary>
        </member>
        <member name="T:StoatSharp.UserStatus">
            <summary>
            User status mode and presence text.
            </summary>
        </member>
        <member name="P:StoatSharp.UserStatus.Text">
            <summary>
            Custom text status for the user.
            </summary>
        </member>
        <member name="P:StoatSharp.UserStatus.Type">
            <summary>
            Status mode for the user.
            </summary>
        </member>
        <member name="T:StoatSharp.UserStatusType">
            <summary>
            Status mode for the user.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Offline">
            <summary>
            User is not online on Stoat.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Online">
            <summary>
            User is online and using Stoat.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Idle">
            <summary>
            User is away from their computer.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Focus">
            <summary>
            User is focused on a task but is available.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Busy">
            <summary>
            Do not FK WITH THIS USER.
            </summary>
        </member>
        <member name="F:StoatSharp.UserStatusType.Invisible">
            <summary>
            Who you gonna call? Ghost busters!
            </summary>
        </member>
        <member name="T:StoatSharp.Webhook">
            <summary>
            Stoat channel webhook to use with 3rd party services and APIs.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.Name">
            <summary>
            Name of the webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.Avatar">
            <summary>
            Avatar attachment of the webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.ChannelId">
            <summary>
            Channel id of the webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.CreatedUserId">
            <summary>
            User id that created the webhook
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.Channel">
            <summary>
            Channel of the webhook.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/>.
            </remarks>
        </member>
        <member name="P:StoatSharp.Webhook.Permissions">
            <summary>
            Permissions the webhook can use.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.Token">
            <summary>
            The token used when sending messages as the webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.Webhook.HasToken">
            <summary>
            If the webhook object is authorized to use the token for requests.
            </summary>
        </member>
        <member name="M:StoatSharp.Webhook.ToString">
            <summary> Returns a string that represents the current object.</summary>
            <returns> Webhook name </returns>
        </member>
        <member name="T:StoatSharp.WebhookPermission">
            <summary>
            List of webhook permissions.
            </summary>
        </member>
        <member name="F:StoatSharp.WebhookPermission.SendMessages">
            <summary>
            Send messages permission.
            </summary>
        </member>
        <member name="F:StoatSharp.WebhookPermission.SendEmbeds">
            <summary>
            Send embeds permission.
            </summary>
        </member>
        <member name="F:StoatSharp.WebhookPermission.Masquerade">
            <summary>
            Masquerade messages permission.
            </summary>
        </member>
        <member name="F:StoatSharp.WebhookPermission.AddReactions">
            <summary>
            Add reactions to messages permission.
            </summary>
        </member>
        <member name="T:StoatSharp.WebhookPermissions">
            <summary>
            Permissions for the webhook that can be used.
            </summary>
        </member>
        <member name="P:StoatSharp.WebhookPermissions.Raw">
            <summary>
            Raw permissions number for the webhook.
            </summary>
        </member>
        <member name="P:StoatSharp.WebhookPermissions.SendMessages">
            <summary>
            The webhook can send messages.
            </summary>
        </member>
        <member name="P:StoatSharp.WebhookPermissions.SendEmbeds">
            <summary>
            The webhook can send embeds.
            </summary>
        </member>
        <member name="P:StoatSharp.WebhookPermissions.Masquerade">
            <summary>
            The webhook can modify the message author and avatar sending the message.
            </summary>
        </member>
        <member name="P:StoatSharp.WebhookPermissions.AddReactions">
            <summary>
            The webhook can add reactions to its own messages.
            </summary>
        </member>
        <member name="M:StoatSharp.WebhookPermissions.Has(StoatSharp.WebhookPermission)">
            <summary>
            Check if the webhook has a specific permission.
            </summary>
            <returns><see langword="bool" /></returns>
        </member>
        <member name="T:StoatSharp.Downloadable`2">
            <summary>
            Cached object or downloadable from the Stoat instance API.
            </summary>
        </member>
        <member name="M:StoatSharp.Downloadable`2.GetOrDownloadAsync">
            <summary>
            Get the object from cache or download it from the Stoat instance API if not cached.
            </summary>
        </member>
        <member name="P:StoatSharp.EmojiList.NameToUnicode">
            <summary>
            It's recommended to use Emoji.ParseName()
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Bold(System.String)">
            <summary>
            Format the text in bold.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Italic(System.String)">
            <summary>
            Format the text in italics.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.BoldItalic(System.String)">
            <summary>
            Format the text in bold and italics.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Strikethrough(System.String)">
            <summary>
            Format the text with a strikethrough.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Quote(System.String)">
            <summary>
            Format the text in a quote block.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Spoiler(System.String)">
            <summary>
            Format the text in a spoiler block
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Link(System.String,System.String)">
            <summary>
            Format the text as a link.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Heading(System.String,StoatSharp.HeadingFormat)">
            <summary>
            Format the text as a heading title.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.Code(System.String)">
            <summary>
            Format the text in a code line.
            </summary>
        </member>
        <member name="M:StoatSharp.Format.CodeBlock(System.String,System.String)">
            <summary>
            Format the text in code block.
            </summary>
        </member>
        <member name="T:StoatSharp.Ulid">
            <summary>
            Represents a Universally Unique Lexicographically Sortable Identifier (ULID).
            Spec: https://github.com/ulid/spec
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:StoatSharp.Ulid.Time" -->
        <member name="M:StoatSharp.Ulid.Parse(System.String)">
            <summary>
            Parse a Stoat id to Ulid class.
            </summary>
            <param name="base32"></param>
            <returns><see cref="T:StoatSharp.Ulid"/></returns>
        </member>
        <member name="M:StoatSharp.Ulid.TryCheck(System.String)">
            <summary>
            Check if the Stoat id is valid.
            </summary>
            <param name="base32"></param>
            <returns><see langword="bool"/></returns>
        </member>
        <member name="M:StoatSharp.Ulid.TryParse(System.String,StoatSharp.Ulid@)">
            <summary>
            Try parse a Stoat id to Ulid class.
            </summary>
            <param name="base32"></param>
            <param name="ulid"></param>
            <returns><see langword="bool"/></returns>
        </member>
        <member name="M:StoatSharp.DisableConsoleQuickEdit.Go">
            <summary>
            Fix the console from freezing the bot due to checking for readinput in the console
            </summary>
        </member>
        <member name="T:StoatSharp.BotHelper">
            <summary>
            Stoat http/rest methods for current user/bot account.
            </summary>
        </member>
        <member name="M:StoatSharp.BotHelper.UploadFileAsync(StoatSharp.Channel,System.Byte[],System.String,StoatSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:StoatSharp.Rest.StoatRestClient.UploadFileAsync(System.Byte[],System.String,StoatSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:StoatSharp.BotHelper.UploadFileAsync(StoatSharp.Channel,System.String,StoatSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:StoatSharp.Rest.StoatRestClient.UploadFileAsync(System.Byte[],System.String,StoatSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:StoatSharp.BotHelper.GetSavedMessagesChannelAsync(StoatSharp.SelfUser)">
            <inheritdoc cref="M:StoatSharp.BotHelper.GetSavedMessagesChannelAsync(StoatSharp.Rest.StoatRestClient)" />
        </member>
        <member name="M:StoatSharp.BotHelper.GetSavedMessagesChannelAsync(StoatSharp.Rest.StoatRestClient)">
            <summary>
            Get or create the current user/bot's saved messages channel that is private.
            </summary>
            <returns>
            <see cref="T:StoatSharp.SavedMessagesChannel" /> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.BotHelper.GetPublicBotAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get information about a public bot account.
            </summary>
            <returns>
            <see cref="T:StoatSharp.PublicBot"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.BotHelper.GetQueryAsync(StoatSharp.Rest.StoatRestClient,System.Boolean)">
            <summary>
            Get the current query info of the connected Stoat instance.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Query"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.SelfUserHelper">
            <summary>
            Stoat http/rest methods for current user/bot account.
            </summary>
        </member>
        <member name="M:StoatSharp.SelfUserHelper.ModifySelfAsync(StoatSharp.SelfUser,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.UserStatusType},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.SelfUserHelper.ModifySelfAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.UserStatusType},StoatSharp.Option{System.String},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.SelfUserHelper.ModifySelfAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.UserStatusType},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <summary>
            Modify the current user/bot account avatar, status and profile.
            </summary>
            <returns>
            Modified <see cref="T:StoatSharp.SelfUser"/>
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.SelfUserHelper.GetPrivateChannelsAsync(StoatSharp.SelfUser)">
            <inheritdoc cref="M:StoatSharp.SelfUserHelper.GetPrivateChannelsAsync(StoatSharp.Rest.StoatRestClient)"/>
        </member>
        <member name="M:StoatSharp.SelfUserHelper.GetPrivateChannelsAsync(StoatSharp.Rest.StoatRestClient)">
            <summary>
            Get all private DM and Group channels the current user/bot account is in.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.Channel"/> that can be cast to <see cref="T:StoatSharp.DMChannel"/> or <see cref="T:StoatSharp.GroupChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.UserHelper">
            <summary>
            Stoat http/rest methods for users.
            </summary>
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.GroupChannel,System.String)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.DMChannel)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a user.
            </summary>
            <returns>
            <see cref="T:StoatSharp.User" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetProfileAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get the profile info for a user.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Profile" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.UserHelper.GetDMChannelAsync(StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetUserDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserDMChannelAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetUserDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetUserDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get or open a DM channel for the user.
            </summary>
            <returns>
            <see cref="T:StoatSharp.DMChannel" /> or <see langword="null" /> if no mutual servers, groups or dms.
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.UserHelper.BlockAsync(StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.BlockUserAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.BlockUserAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Block a user for the current user/bot account.
            </summary>
            <remarks>
            The user will not be able to DM the current user/bot account.
            </remarks>
            <returns>
            <see cref="T:StoatSharp.User" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
            /// <returns>
            <see cref="T:StoatSharp.User" /> or <see langword="null" /> if the user is already blocked.
            </returns>
        </member>
        <member name="M:StoatSharp.UserHelper.UnBlockAsync(StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.UnBlockUserAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.UnBlockUserAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Unblock a user for the current user/bot account.
            </summary>
            <returns>
            <see cref="T:StoatSharp.User" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.UserHelper.GetMutualsAsync(StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetMutualsAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetMutualsAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.UserHelper.GetMutualsAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.UserHelper.GetMutualsAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a list of mutual servers for the user or mutual friend users if using a user account.
            </summary>
            <returns>
            <see cref="T:StoatSharp.UserMutuals" /> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.ChannelHelper">
            <summary>
            Stoat http/rest methods for base channel types.
            </summary>
        </member>
        <member name="M:StoatSharp.ChannelHelper.GetChannelAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.GetChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.GetChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Channel"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ChannelHelper.ModifyChannelAsync(StoatSharp.Server,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean})">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.ModifyChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.ModifyChannelAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.ModifyChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.ModifyChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.String})">
            <summary>
            Update a channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Channel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ChannelHelper.DeleteAsync(StoatSharp.ServerChannel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Server,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Server,System.String)">
            <summary>
            Delete a server channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Delete a channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ChannelHelper.TriggerTypingAsync(StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.TriggerTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.TriggerTypingAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.TriggerTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.TriggerTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Trigger the typing indicator one-time on a channel which will stop after 3 seconds.
            </summary>
            <remarks>
            This will only work with <see cref="F:StoatSharp.ClientMode.WebSocket"/>
            </remarks>
        </member>
        <member name="M:StoatSharp.ChannelHelper.BeginTypingAsync(StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.BeginTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.BeginTypingAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.BeginTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.BeginTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Trigger the typing indicator continuously on a channel, you can use the <see cref="T:StoatSharp.WebSocket.TypingNotifier"/> class to stop typing or using the StopTypingChannelAsync rest/channel request.
            </summary>
            <remarks>
            This will only work with <see cref="F:StoatSharp.ClientMode.WebSocket"/>
            </remarks>
        </member>
        <member name="M:StoatSharp.ChannelHelper.StopTypingAsync(StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.StopTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.StopTypingAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel)">
            <inheritdoc cref="M:StoatSharp.ChannelHelper.StopTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ChannelHelper.StopTypingChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Trigger the stop typing on a channel which will stop the current user from typing in the channel.
            </summary>
            <remarks>
            This will only work with <see cref="F:StoatSharp.ClientMode.WebSocket"/>
            </remarks>
            <param name="rest"></param>
            <param name="channelId"></param>
        </member>
        <member name="T:StoatSharp.GroupChannelHelper">
            <summary>
            Stoat http/rest methods for group channels.
            </summary>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.CreateGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},System.Boolean)">
            <summary>
            Create a group channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.GroupChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.GetUsersAsync(StoatSharp.GroupChannel)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.GetGroupChannelUsersAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.GetGroupChannelUsersAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.GroupChannel)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.GetGroupChannelUsersAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.GetGroupChannelUsersAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a list of users for the group channel.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.User"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.GetGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a group channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.GroupChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.GetGroupChannelsAsync(StoatSharp.Rest.StoatRestClient)">
            <summary>
            Get a list of group channels the current user/bot account is in.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.GroupChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.LeaveAsync(StoatSharp.GroupChannel)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.LeaveGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.LeaveGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Leave a group channel or delete if you are the last user.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.AddUserAsync(StoatSharp.GroupChannel,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.AddUserToGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.AddUserAsync(StoatSharp.GroupChannel,System.String)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.AddUserToGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.AddUserToGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Add a user to the group channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.RemoveUserAsync(StoatSharp.GroupChannel,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.RemoveUserAsync(StoatSharp.GroupChannel,System.String)">
            <inheritdoc cref="M:StoatSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.RemoveUserFromGroupChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Remove a user from the group channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.GroupChannelHelper.ModifyAsync(StoatSharp.GroupChannel,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.String})">
            <summary>
            Update a group channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.GroupChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.MessageHelper">
            <summary>
            Stoat http/rest methods for messages.
            </summary>
        </member>
        <member name="M:StoatSharp.MessageHelper.SendMessageAsync(StoatSharp.Channel,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendMessageAsync(StoatSharp.StoatWebhookClient,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.InternalSendMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.String,StoatSharp.Embed[],System.String[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <summary>
            Send a message to the channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.UserMessage"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.Channel,System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.Channel,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.Rest.StoatRestClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.StoatWebhookClient,System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.SendFileAsync(StoatSharp.StoatWebhookClient,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.InternalSendFileAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.StoatWebhookClient,System.String,System.Byte[],System.String,System.String,StoatSharp.Embed[],StoatSharp.MessageMasquerade,StoatSharp.MessageInteractions,StoatSharp.MessageReply[],System.Nullable{StoatSharp.MessageFlag})">
            <summary>
            Upload a file and send a message to the channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.UserMessage"/> 
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.GetMessagesAsync(StoatSharp.Channel,System.Int32,StoatSharp.MessageSortType,System.Boolean,System.String,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.GetMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,System.Int32,StoatSharp.MessageSortType,System.Boolean,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.GetMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,System.Int32,StoatSharp.MessageSortType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Get a list of messages from the channel up to 100.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.Message"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.GetMessageAsync(StoatSharp.Channel,System.String)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.GetMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.GetMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Get a message from the current channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Message"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.EditMessageAsync(StoatSharp.UserMessage,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Embed[]})">
            <inheritdoc cref="M:StoatSharp.MessageHelper.EditMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Embed[]})" />
        </member>
        <member name="M:StoatSharp.MessageHelper.EditMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Embed[]})">
            <summary>
            Edit a message sent by the current user/bot account with properties.
            </summary>
            <returns>
            <see cref="T:StoatSharp.UserMessage"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteAsync(StoatSharp.Message)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Channel,StoatSharp.Message)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Channel,System.String)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel,StoatSharp.Message)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Channel,System.String)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessageAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Delete a message from a channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessagesAsync(StoatSharp.Channel,StoatSharp.Message[])">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String[])" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessagesAsync(StoatSharp.Channel,System.String[])">
            <inheritdoc cref="M:StoatSharp.MessageHelper.DeleteMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String[])" />
        </member>
        <member name="M:StoatSharp.MessageHelper.DeleteMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String[])">
            <summary>
            Delete a list of messages from a channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MessageHelper.CloseAsync(StoatSharp.DMChannel)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.CloseDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.CloseAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.DMChannel)">
            <inheritdoc cref="M:StoatSharp.MessageHelper.CloseDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.MessageHelper.CloseDMChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Close a DM channel.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.ReactionHelpers">
            <summary>
            Stoat http/rest methods for reactions.
            </summary>
        </member>
        <member name="M:StoatSharp.ReactionHelpers.AddReactionAsync(StoatSharp.UserMessage,StoatSharp.Emoji)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.AddMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.AddReactionAsync(StoatSharp.UserMessage,System.String)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.AddMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.AddMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)">
            <summary>
            Add a reaction to the message.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveReactionAsync(StoatSharp.UserMessage,StoatSharp.Emoji,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.RemoveMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveReactionAsync(StoatSharp.UserMessage,StoatSharp.Emoji,StoatSharp.User,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.RemoveMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveReactionAsync(StoatSharp.UserMessage,System.String,StoatSharp.User,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.RemoveMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveReactionAsync(StoatSharp.UserMessage,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.RemoveMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveMessageReactionAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Remove a reaction from the message.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveAllReactionsAsync(StoatSharp.UserMessage)">
            <inheritdoc cref="M:StoatSharp.ReactionHelpers.RemoveAllMessageReactionsAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.ReactionHelpers.RemoveAllMessageReactionsAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Remove all reactions from a message.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.WebhookHelper">
            <summary>
            Stoat http/rest methods for webhooks.
            </summary>
        </member>
        <member name="M:StoatSharp.WebhookHelper.GetWebhooksAsync(StoatSharp.GroupChannel)">
            <inheritdoc cref="M:StoatSharp.WebhookHelper.GetWebhooksAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.WebhookHelper.GetWebhooksAsync(StoatSharp.TextChannel)">
            <inheritdoc cref="M:StoatSharp.WebhookHelper.GetWebhooksAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.WebhookHelper.GetWebhooksAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get all webhooks for this channel.
            </summary>
            <returns>List of <see cref="T:StoatSharp.Webhook"/></returns>
        </member>
        <member name="M:StoatSharp.WebhookHelper.CreateWebhookAsync(StoatSharp.GroupChannel,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.WebhookHelper.CreateWebhookAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.WebhookHelper.CreateWebhookAsync(StoatSharp.TextChannel,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.WebhookHelper.CreateWebhookAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.WebhookHelper.CreateWebhookAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)">
            <summary>
            Create a webhook for the channel.
            </summary>
            <returns><see cref="T:StoatSharp.Webhook"/></returns>
            <exception cref="T:StoatSharp.StoatArgumentException" />
            <exception cref="T:StoatSharp.StoatRestException" />
            <exception cref="T:StoatSharp.StoatPermissionException" />
        </member>
        <member name="T:StoatSharp.CategoryHelper">
            <summary>
            Stoat http/rest methods for categories.
            </summary>
        </member>
        <member name="T:StoatSharp.EmojiHelper">
            <summary>
            Stoat http/rest methods for emojis.
            </summary>
        </member>
        <member name="M:StoatSharp.EmojiHelper.GetCreatorAsync(StoatSharp.Emoji)">
            <summary>
            The user that created this emoji.
            </summary>
            <remarks>
            Will be <see langword="null" /> if using <see cref="F:StoatSharp.ClientMode.Http"/> or you can't access the user.
            </remarks>
        </member>
        <member name="M:StoatSharp.EmojiHelper.GetEmojiAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.GetEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.GetEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get an emoji.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Emoji" /> or <see langword="null" /> if no emoji found.
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.EmojiHelper.GetEmojisAsync(StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.GetEmojisAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.GetEmojisAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get all emojis from a server
            </summary>
            <returns>
            List of server <see cref="T:StoatSharp.Emoji" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Server,System.Byte[],System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String,System.Byte[],System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.CreateEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a server <see cref="T:StoatSharp.Emoji" />
            </summary>
            <remarks>
            You need <see cref="F:StoatSharp.ServerPermission.ManageCustomisation" /> and has a max count of 100 per-server.
            </remarks>
            <param name="rest"></param>
            <param name="attachmentIdOrFile">Uploaded file attachment from rest UploadFileAsync</param>
            <param name="serverId">Server id</param>
            <param name="emojiName">Name of emoji</param>
            <param name="nsfw">Is the emoji nsfw</param>
            <returns><see cref="T:StoatSharp.Emoji" /></returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.EmojiHelper.DeleteAsync(StoatSharp.Emoji)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.DeleteEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.DeleteEmojiAsync(StoatSharp.Server,StoatSharp.Emoji)">
            <inheritdoc cref="M:StoatSharp.EmojiHelper.DeleteEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.EmojiHelper.DeleteEmojiAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Delete an <see cref="T:StoatSharp.Emoji" /> from a server
            </summary>
            <remarks>
            You need <see cref="F:StoatSharp.ServerPermission.ManageCustomisation" />
            </remarks>
            <param name="rest"></param>
            <param name="emojiId">Emoji id</param>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.InviteHelper">
            <summary>
            Stoat http/rest methods for server invites.
            </summary>
        </member>
        <member name="M:StoatSharp.InviteHelper.DeleteAsync(StoatSharp.Invite)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Server,StoatSharp.Invite)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Invite)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.DeleteInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Delete an invite.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.InviteHelper.GetInvitesAsync(StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.GetInvitesAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.GetInvitesAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a list of invites for the server.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.Invite"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.InviteHelper.GetInviteAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.GetInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.GetInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get info for an invite.
            </summary>
            <returns>
            <see cref="T:StoatSharp.CreatedInvite"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.InviteHelper.CreateInviteAsync(StoatSharp.TextChannel)">
            <inheritdoc cref="M:StoatSharp.InviteHelper.CreateInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.InviteHelper.CreateInviteAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Only user accounts can create invites
            </summary>
            <returns>
            <see cref="T:StoatSharp.CreatedInvite"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.MemberHelper">
            <summary>
            Stoat http/rest methods for server members.
            </summary>
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.ServerMember,StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.ServerMember,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)">
            <summary>
            Add a role to a server member.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.ServerMember,StoatSharp.Role[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.ServerMember,System.String[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,StoatSharp.Role[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.AddRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])">
            <summary>
            Add roles to a server member.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.ServerMember,StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.ServerMember,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRoleAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String)">
            <summary>
            Remove a role from a server member.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.ServerMember,StoatSharp.Role[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.ServerMember,System.String[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,StoatSharp.Role[])">
            <inheritdoc cref="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])" />
        </member>
        <member name="M:StoatSharp.MemberHelper.RemoveRolesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.ServerMember,System.String[])">
            <summary>
            Remove roles from a server member.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.GetMemberAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.GetMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.GetMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Get member info from a server.
            </summary>
            <returns>
            <see cref="T:StoatSharp.ServerMember"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.GetMembersAsync(StoatSharp.Server,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.GetMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.GetMembersAsync(StoatSharp.Rest.StoatRestClient,System.String,System.Boolean)">
            <summary>
            Get all members from a server.
            </summary>
            <remarks>
            It is recommended to reuse this list or use the server member cache once this has completed.
            </remarks>
            <returns>
            List of <see cref="T:StoatSharp.ServerMember"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Server,StoatSharp.ServerMember)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Server,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.KickAsync(StoatSharp.ServerMember)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.KickMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Kick a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:StoatSharp.ServerPermission.KickMembers"/>
            </remarks>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Server,StoatSharp.ServerMember,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Server,StoatSharp.User,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.BanAsync(StoatSharp.ServerMember,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.BanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)">
            <summary>
            Ban a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:StoatSharp.ServerPermission.BanMembers"/>
            </remarks>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.UnBanMemberAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.UnBanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.UnBanMemberAsync(StoatSharp.Server,StoatSharp.User)">
            <inheritdoc cref="M:StoatSharp.MemberHelper.UnBanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.MemberHelper.UnBanMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Unban a member from a server.
            </summary>
            <remarks>
            Current user/bot account needs <see cref="F:StoatSharp.ServerPermission.BanMembers"/>
            </remarks>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.MemberHelper.ModifyAsync(StoatSharp.ServerMember,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Server,StoatSharp.ServerMember,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Server,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})">
            <inheritdoc cref="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:StoatSharp.MemberHelper.ModifyMemberAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{StoatSharp.Attachment},StoatSharp.Option{System.Nullable{System.DateTime}})">
            <summary>
            Modify a server member.
            </summary>
            <remarks>
            This will not return a full user object!
            </remarks>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.RoleHelper">
            <summary>
            Stoat http/rest methods for server roles.
            </summary>
        </member>
        <member name="M:StoatSharp.RoleHelper.CreateRoleAsync(StoatSharp.Server,System.String,StoatSharp.Option{System.Int32})">
            <inheritdoc cref="M:StoatSharp.RoleHelper.CreateRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.Int32})" />
        </member>
        <member name="M:StoatSharp.RoleHelper.CreateRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.Int32})">
            <summary>
            Create a server role.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Role"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.RoleHelper.ModifyAsync(StoatSharp.Role,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})">
            <inheritdoc cref="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})" />
        </member>
        <member name="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Server,StoatSharp.Role,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})">
            <inheritdoc cref="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})" />
        </member>
        <member name="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Server,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})">
            <inheritdoc cref="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})" />
        </member>
        <member name="M:StoatSharp.RoleHelper.ModifyRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean},StoatSharp.Option{System.Int32})">
            <summary>
            Update a role with properties.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Role"/> 
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.RoleHelper.DeleteAsync(StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Server,StoatSharp.Role)">
            <inheritdoc cref="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.RoleHelper.DeleteRoleAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String)">
            <summary>
            Delete a role from a server.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.ServerHelper">
            <summary>
            Stoat http/rest methods for servers.
            </summary>
        </member>
        <member name="M:StoatSharp.ServerHelper.GetServerAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a server.
            </summary>
            <returns>
            <see cref="T:StoatSharp.Server"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ServerHelper.GetBansAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.GetBansAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.GetBansAsync(StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.GetBansAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.GetBansAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a list of banned users for a server.
            </summary>
            <returns>
            List of <see cref="T:StoatSharp.ServerBan"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ServerHelper.LeaveAsync(StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.LeaveServerAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.LeaveAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.LeaveServerAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.LeaveServerAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Leave server or delete it if owned.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyDefaultPermissionsAsync(StoatSharp.Server,StoatSharp.ServerPermissions)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyDefaultPermissionsAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.ServerPermissions)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyDefaultPermissionsAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,StoatSharp.ServerPermissions)">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyDefaultPermissionsAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.ServerPermissions)" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyDefaultPermissionsAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.ServerPermissions)">
            <summary>
            Modify the default member permissions for the server.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyAsync(StoatSharp.Server,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyServerAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyServerAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyServerAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyServerAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <summary>
            Modify the properties of a Stoat server such as name, description, icon and banner.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifySystemMessagesAsync(StoatSharp.Server,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyServerSystemMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyServerSystemMessagesAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <inheritdoc cref="M:StoatSharp.ServerHelper.ModifyServerSystemMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})" />
        </member>
        <member name="M:StoatSharp.ServerHelper.ModifyServerSystemMessagesAsync(StoatSharp.Rest.StoatRestClient,System.String,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String})">
            <summary>
            Modify the properties of a Stoat server such as name, description, icon and banner.
            </summary>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.TextChannelHelper">
            <summary>
            Stoat http/rest methods for text channels.
            </summary>
        </member>
        <member name="M:StoatSharp.TextChannelHelper.DeleteAsync(StoatSharp.TextChannel)">
            <summary>
            Delete this text channel.
            </summary>
            <inheritdoc cref="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.TextChannelHelper.GetTextChannelAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.TextChannelHelper.GetTextChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.TextChannelHelper.GetTextChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a server text channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.TextChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.TextChannelHelper.CreateTextChannelAsync(StoatSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.TextChannelHelper.CreateTextChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.TextChannelHelper.CreateTextChannelAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:StoatSharp.TextChannelHelper.CreateTextChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:StoatSharp.TextChannelHelper.CreateTextChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create a server text channel with properties.
            </summary>
            <returns>
            <see cref="T:StoatSharp.TextChannel" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.TextChannelHelper.ModifyAsync(StoatSharp.TextChannel,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean})">
            <summary>
            Update a text channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.TextChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.VoiceChannelHelper">
            <summary>
            Stoat http/rest methods for voice channel.
            </summary>
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.DeleteAsync(StoatSharp.VoiceChannel)">
            <summary>
            Delete this voice channel.
            </summary>
            <inheritdoc cref="M:StoatSharp.ChannelHelper.DeleteChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.GetVoiceChannelAsync(StoatSharp.Server,System.String)">
            <inheritdoc cref="M:StoatSharp.VoiceChannelHelper.GetVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)" />
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.GetVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,System.String)">
            <summary>
            Get a server voice channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.VoiceChannel"/> or <see langword="null" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.CreateVoiceChannelAsync(StoatSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.VoiceChannelHelper.CreateVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.CreateVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,StoatSharp.Server,System.String,System.String)">
            <inheritdoc cref="M:StoatSharp.VoiceChannelHelper.CreateVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)" />
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.CreateVoiceChannelAsync(StoatSharp.Rest.StoatRestClient,System.String,System.String,System.String)">
            <summary>
            Create a server voice channel with properties.
            </summary>
            <returns>
            <see cref="T:StoatSharp.VoiceChannel" />
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="M:StoatSharp.VoiceChannelHelper.ModifyAsync(StoatSharp.VoiceChannel,StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.String},StoatSharp.Option{System.Boolean})">
            <summary>
            Update a voice channel.
            </summary>
            <returns>
            <see cref="T:StoatSharp.VoiceChannel"/>
            </returns>
            <exception cref="T:StoatSharp.StoatArgumentException"></exception>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.Rest.IStoatRequest">
            <summary>
            Send a custom json body request to the Stoat instance API<br /><br />
            Use <see cref="M:StoatSharp.Rest.StoatRestClient.SendRequestAsync(StoatSharp.Rest.RequestType,System.String,StoatSharp.Rest.IStoatRequest)"/> or <see cref="!:StoatRestClient.SendRequestAsync&lt;TResponse&gt;(RequestType, string, IStoatRequest, bool)"/>
            </summary>
        </member>
        <member name="T:StoatSharp.Rest.StoatRestClient">
            <summary>
            The internal http client used for sending requests to the Stoat instance API and built-in extension methods.
            </summary>
        </member>
        <member name="M:StoatSharp.Rest.StoatRestClient.SendRequestAsync(StoatSharp.Rest.RequestType,System.String,StoatSharp.Rest.IStoatRequest)">
            <summary>
            Send a custom request to the Stoat instance API.
            </summary>
            <remarks>
            Optionally you can also send a C# class as the json body for the request, this is useful for POST/PUT requests.
            <para />
            You need to interface your custom class using <see cref="T:StoatSharp.Rest.IStoatRequest"/><br/>
            CustomClass : StoatRequest<br/>
            {<br/>
                public string option = "Hi"<br/>
            }
            </remarks>
            <returns><see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:StoatSharp.Rest.StoatRestClient.SendRequestAsync``1(StoatSharp.Rest.RequestType,System.String,StoatSharp.Rest.IStoatRequest,System.Boolean,System.Boolean)">
            <summary>
            Send a custom request to the Stoat instance API.
            </summary>
            <remarks>
            Optionally you can also send a C# class as the json body for the request, this is useful for POST/PUT requests.
            <para />
            You need to interface your custom class using <see cref="T:StoatSharp.Rest.IStoatRequest"/><br/>
            CustomClass : StoatRequest<br/>
            {<br/>
                public string option = "Hi"<br/>
            }
            </remarks>
            <returns>Input your own <see langword="class" /> object to parse the response data from json.</returns>
        </member>
        <member name="M:StoatSharp.Rest.StoatRestClient.UploadFileAsync(System.String,StoatSharp.Rest.UploadFileType)">
            <inheritdoc cref="M:StoatSharp.Rest.StoatRestClient.UploadFileAsync(System.Byte[],System.String,StoatSharp.Rest.UploadFileType)" />
        </member>
        <member name="M:StoatSharp.Rest.StoatRestClient.UploadFileAsync(System.Byte[],System.String,StoatSharp.Rest.UploadFileType)">
            <summary>
            Upload a file to the Stoat instance CDN that can be used for attachments, avatars, banners, ect.
            </summary>
            <returns>Created <see cref="T:StoatSharp.FileAttachment"/></returns>
            <exception cref="T:StoatSharp.StoatRestException"></exception>
        </member>
        <member name="T:StoatSharp.Rest.UploadFileType">
            <summary>
            File type to upload to the Stoat instance CDN.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Attachment">
            <summary>
            Upload a normal file e.g txt, mp4, ect.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Avatar">
            <summary>
            Set the bot's avatar with this image.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Icon">
            <summary>
            Set a server or channel icon with this image.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Banner">
            <summary>
            Set a server banner with this image.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Background">
            <summary>
            Set the bot's profile background with this image.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.UploadFileType.Emoji">
            <summary>
            Create a server emoji with this image.
            </summary>
        </member>
        <member name="T:StoatSharp.Rest.RequestType">
            <summary>
            The request method type to use for sending requests to the Stoat instance API.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.RequestType.Get">
            <summary>
            Get data from the API.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.RequestType.Post">
            <summary>
            Post new messages or create channels.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.RequestType.Delete">
            <summary>
            Delete a message, channel, ect.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.RequestType.Patch">
            <summary>
            Update an existing channel, server, ect.
            </summary>
        </member>
        <member name="F:StoatSharp.Rest.RequestType.Put">
            <summary>
            Post new emojis.
            </summary>
        </member>
        <member name="T:Optionals.Optional">
            <summary>
            Provides a set of functions for creating optional values.
            </summary>
        </member>
        <member name="M:Optionals.Optional.Some``1(``0)">
            <summary>
            Wraps an existing value in an Option&lt;T&gt; instance.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>An optional containing the specified value.</returns>
        </member>
        <member name="M:Optionals.Optional.None``1">
            <summary>
            Creates an empty Option&lt;T&gt; instance.
            </summary>
            <returns>An empty optional.</returns>
        </member>
        <member name="T:Optionals.Optional`1">
            <summary>
            Represents an optional value.
            </summary>
        </member>
        <member name="P:Optionals.Optional`1.HasValue">
            <summary>
            Checks if a value is present.
            </summary>
        </member>
        <member name="M:Optionals.Optional`1.ValueOr(`0)">
            <summary>
            Returns the existing value if present, and otherwise an alternative value.
            </summary>
            <param name="alternative">The alternative value.</param>
            <returns>The existing or alternative value.</returns>
        </member>
    </members>
</doc>
